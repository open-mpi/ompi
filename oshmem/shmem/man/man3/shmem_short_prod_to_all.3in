.\" -*- nroff -*-
.\" Copyright (c) 2015      University of Houston.  All rights reserved.
.\" Copyright (c) 2014-2016 Mellanox Technologies, Inc.
.\" $COPYRIGHT$
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "SHMEM\\_PROD" "3" "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME

\fIshmem_comp4_prod_to_all\fP(3),
\fIshmem_comp8_prod_to_all\fP(3),
\fIshmem_complexd_prod_to_all\fP(3),
\fIshmem_complexf_prod_to_all\fP(3),
\fIshmem_double_prod_to_all\fP(3),
\fIshmem_float_prod_to_all\fP(3),
\fIshmem_int_prod_to_all\fP(3),
\fIshmem_int4_prod_to_all\fP(3),
\fIshmem_int8_prod_to_all\fP(3),
\fIshmem_long_prod_to_all\fP(3),
\fIshmem_longdouble_prod_to_all\fP(3),
\fIshmem_longlong_prod_to_all\fP(3),
\fIshmem_real8_prod_to_all\fP(3),
\fIshmem_real16_prod_to_all\fP(3),
\fIshmem_real4_prod_to_all\fP(3),
\fIshmem_short_prod_to_all\fP(3)
\- Performs
a product reduction across a set of processing elements (PEs)
.SH SYNOPSIS

C or C++:
.Vb
#include <mpp/shmem.h>

void shmem_complexd_prod_to_all(double complex *target,
  const double complex *source, int nreduce, int PE_start,
  int logPE_stride, int PE_size, double complex *pWrk,
  long *pSync);

void shmem_complexf_prod_to_all(float complex *target,
  const float complex *source, int nreduce, int PE_start,
  int logPE_stride, int PE_size, float complex *pWrk,
  long *pSync);

void shmem_double_prod_to_all(double *target, const double *source,
  int nreduce, int PE_start, int logPE_stride, int PE_size,
  double *pWrk, long *pSync);

void shmem_float_prod_to_all(float *target, const float *source,
  int nreduce, int PE_start, int logPE_stride, int PE_size,
  float *pWrk, long *pSync);

void shmem_int_prod_to_all(int *target, const int *source,
  int nreduce, int PE_start, int logPE_stride, int PE_size,
  int *pWrk, long *pSync);

void shmem_long_prod_to_all(long *target, const long *source,
  int nreduce, int PE_start, int logPE_stride, int PE_size,
  long *pWrk, long *pSync);

void shmem_longdouble_prod_to_all(long double *target,
  const long double *source, int nreduce, int PE_start,
  int logPE_stride, int PE_size, long double *pWrk,
  long *pSync);

void shmem_longlong_prod_to_all(long long *target,
  const long long *source, int nreduce, int PE_start,
  int logPE_stride, int PE_size, long long *pWrk,
  long *pSync);

void shmem_short_prod_to_all(short *target, const short *source,
  int nreduce, int PE_start, int logPE_stride, int PE_size,
  short *pWrk, long *pSync);
.Ve
Fortran:
.Vb
INCLUDE "mpp/shmem.fh"

INTEGER pSync(SHMEM_REDUCE_SYNC_SIZE)
INTEGER nreduce, PE_start, logPE_stride, PE_size

CALL SHMEM_COMP4_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_COMP8_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_INT4_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_INT8_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_REAL4_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_REAL8_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)

CALL SHMEM_REAL16_PROD_TO_ALL(target, source, nreduce, PE_start,
& logPE_stride, PE_size, pWrk, pSync)
.Ve
.SH DESCRIPTION

The shared memory (SHMEM) reduction routines compute one or more reductions across
symmetric arrays on multiple virtual PEs. A reduction performs an associative binary
operation across a set of values. For a list of other SHMEM reduction routines, see
\fIintro_shmem\fP(3)\&.
.PP
As with all SHMEM collective routines, each of these routines assumes that only PEs in the
active set call the routine. If a PE not in the active set calls a SHMEM collective routine,
undefined behavior results.
.PP
The nreduce argument determines the number of separate reductions to perform. The source
array on all PEs in the active set provides one element for each reduction. The results of the
reductions are placed in the target array on all PEs in the active set. The active set is defined
by the PE_start, logPE_stride, PE_size triplet.
.PP
The source and target arrays may be the same array, but they may not be overlapping arrays.
.PP
The arguments are as follows:
.TP
target
A symmetric array of length nreduce elements to receive the results of the
reduction operations. The data type of target varies with the version of the reduction routine
being called and the language used. When calling from C/C++, refer to the SYNOPSIS section
for data type information. When calling from Fortran, the target data types are as follows:
.RS
.TP
\fBshmem_comp4_prod_to_all\fP: Complex, with an element size equal to two
4\-byte real values.
.TP
\fBshmem_comp8_prod_to_all\fP: Complex, with an element size equal to two
8\-byte real values.
.TP
\fBshmem_int4_prod_to_all\fP: Integer, with an element size of 4 bytes
.TP
\fBshmem_int8_prod_to_all\fP: Integer, with an element size of 8 bytes
.TP
\fBshmem_real4_prod_to_all\fP: Real, with an element size of 4 bytes
.TP
\fBshmem_real8_prod_to_all\fP: Real, with an element size of 8 bytes
.TP
\fBshmem_real16_prod_to_all\fP: Real, with an element size of 16 bytes
.RE
.RS
.PP
.RE
.TP
source
A symmetric array, of length nreduce elements, that contains one element for
each separate reduction operation. The source argument must have the same data type as
target.
.TP
nreduce
The number of elements in the target and source arrays. nreduce must be of
type integer. If you are using Fortran, it must be a default integer value.
.TP
PE_start
The lowest virtual PE number of the active set of PEs. PE_start must be of
type integer. If you are using Fortran, it must be a default integer value.
.TP
logPE_stride
The log (base 2) of the stride between consecutive virtual PE numbers in
the active set. logPE_stride must be of type integer. If you are using Fortran, it must be a
default integer value.
.TP
PE_size
The number of PEs in the active set. PE_size must be of type integer. If you
are using Fortran, it must be a default integer value.
.TP
pWrk
A symmetric work array. The pWrk argument must have the same data type as
target. In C/C++, this contains max(nreduce/2 + 1,
_SHMEM_REDUCE_MIN_WRKDATA_SIZE) elements. In Fortran, this contains
max(nreduce/2 + 1, SHMEM_REDUCE_MIN_WRKDATA_SIZE) elements.
.TP
pSync
A symmetric work array. In C/C++, pSync is of type long and size
_SHMEM_REDUCE_SYNC_SIZE. In Fortran, pSync is of type integer and size
SHMEM_REDUCE_SYNC_SIZE. If you are using Fortran, it must be a default integer value.
Before any of the PEs in the active set enter the reduction routine, every element of this array
must be initialized with the value _SHMEM_SYNC_VALUE (in C/C++) or
SHMEM_SYNC_VALUE (in Fortran).
.PP
The values of arguments nreduce, PE_start, logPE_stride, and PE_size must be equal on all
PEs in the active set. The same target and source arrays, and the same pWrk and pSync work
arrays, must be passed to all PEs in the active set. Before any PE calls a reduction routine, you
must ensure that the following conditions exist (synchronization via a barrier or some
other method is often needed to ensure this): The pWrk and pSync arrays on all PEs in the
active set are not still in use from a prior call to a collective SHMEM routine. The target array
on all PEs in the active set is ready to accept the results of the reduction.
.PP
Upon return from a reduction routine, the following are true for the local PE: The target array
is updated. The values in the pSync array are restored to the original values.
.SH NOTES

The terms collective, symmetric, and cache aligned are defined in \fIintro_shmem\fP(3)\&.
All SHMEM reduction routines reset the values in pSync before they return, so a particular
pSync buffer need only be initialized the first time it is used.
.PP
You must ensure that the pSync array is not being updated on any PE in the active set while
any of the PEs participate in processing of a SHMEM reduction routine. Be careful of the
following situations: If the pSync array is initialized at run time, some type of
synchronization is needed to ensure that all PEs in the working set have initialized pSync
before any of them enter a SHMEM routine called with the pSync synchronization array. A
pSync or pWrk array can be reused in a subsequent reduction routine call only if none of the
PEs in the active set are still processing a prior reduction routine call that used the same
pSync or pWrk arrays. In general, this can be assured only by doing some type of
synchronization. However, in the special case of reduction routines being called with the
same active set, you can allocate two pSync and pWrk arrays and alternate between them on
successive calls.
.SH EXAMPLES

\fBExample 1:\fP
This Fortran example statically initializes the pSync array and finds the
product of the real variable FOO across all the even PEs.
.Vb
INCLUDE "mpp/shmem.fh"

INTEGER PSYNC(SHMEM_REDUCE_SYNC_SIZE)
DATA PSYNC /SHMEM_REDUCE_SYNC_SIZE*SHMEM_SYNC_VALUE/
PARAMETER (NR=1)
REAL FOO, FOOPROD, PWRK(MAX(NR/2+1,SHMEM_REDUCE_MIN_WRKDATA_SIZE))
COMMON /COM/ FOO, FOOPROD, PWRK
INTRINSIC MY_PE

IF ( MOD(MY_PE(),2) .EQ. 0) THEN
  CALL SHMEM_COMP8_PROD_TO_ALL(FOOPROD, FOO, NR, 0, 1, N$PES/2,
  & PWRK, PSYNC)
  PRINT *, 'Result on PE ', MY_PE(), ' is ', FOOPROD
ENDIF
.Ve
\fBExample 2:\fP
Consider the following C/C++ call:
.Vb
shmem_short_prod_to_all(target, source, 3, 0, 0, 8, pwrk, psync);
.Ve
The preceding call is more efficient, but semantically equivalent to, the combination of the
following calls:
.Vb
shmem_short_prod_to_all(&(target[0]), &(source[0]), 1, 0, 0, 8,
  pwrk1, psync1);
shmem_short_prod_to_all(&(target[1]), &(source[1]), 1, 0, 0, 8,
  pwrk2, psync2);
shmem_short_prod_to_all(&(target[2]), &(source[2]), 1, 0, 0, 8,
  pwrk1, psync1);
.Ve
Note that two sets of pWrk and pSync arrays are used alternately because no synchronization
is done between calls.
.SH SEE ALSO

\fIintro_shmem\fP(3)
