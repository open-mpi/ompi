name: mpi4py

on:
  pull_request:
  workflow_dispatch:
    inputs:
      repository:
        description: 'mpi4py repository'
        default: 'mpi4py/mpi4py'
        required: false
        type: string
      ref:
        description: 'mpi4py branch/tag/SHA'
        default: 'master'
        required: false
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      MPI4PY_TEST_SPAWN: true
    steps:
    - name: Configure hostname
      run:  echo 127.0.0.1 `hostname` | sudo tee -a /etc/hosts > /dev/null
      if:   ${{ runner.os == 'Linux' || runner.os == 'macOS' }}

    - name: Install depencencies
      run:  sudo apt-get install -y -q
              libnuma-dev
      if:   ${{ runner.os == 'Linux' }}

    - name: Checkout Open MPI
      uses: actions/checkout@v4
      with:
       path: mpi-build
       submodules: recursive

    - name: Bootstrap Open MPI
      run:  ./autogen.pl
      working-directory: mpi-build

    # Install into a separate directory (/opt/openmpi) so that we can
    # bundle up that tree into an artifact to share with other jobs in
    # this github action.  Specifically don't use /usr/local, because
    # there's a bunch of other stuff already installed in /usr/local,
    # and we don't need to include that in our artifact.
    - name: Configure Open MPI
      run:  ./configure
              --disable-dependency-tracking
              --enable-debug
              --enable-mem-debug
              --disable-sphinx
              --disable-mpi-fortran
              --disable-oshmem
              --prefix=/opt/openmpi
              LDFLAGS=-Wl,-rpath,/opt/openmpi/lib
      working-directory: mpi-build

    - name: Build MPI
      run:  make -j $(nproc)
      working-directory: mpi-build

    - name: Install MPI
      run:  sudo make install
      working-directory: mpi-build

    - name: Add Open MPI to PATH
      run: echo /opt/openmpi/bin >> $GITHUB_PATH

    - name: Tweak MPI
      run:  |
        # Tweak MPI
        mca_params="$HOME/.openmpi/mca-params.conf"
        mkdir -p "$(dirname "$mca_params")"
        echo mpi_param_check = true >> "$mca_params"
        echo mpi_show_handle_leaks = true >> "$mca_params"
        echo rmaps_base_oversubscribe = true >> "$mca_params"
        mca_params="$HOME/.prte/mca-params.conf"
        mkdir -p "$(dirname "$mca_params")"
        echo rmaps_default_mapping_policy = :oversubscribe >> "$mca_params"

    - name: Show MPI
      run:  ompi_info

    - name: Show MPICC
      run:  mpicc -show

    - name: Use Python
      uses: actions/setup-python@v5
      with:
        python-version: 3
        architecture: x64

    - name: Install Python packages (build)
      run:  python -m pip install --upgrade
              setuptools pip wheel

    - name: Install Python packages (test)
      run:  python -m pip install --upgrade
              numpy cffi pyyaml

    - name: Checkout mpi4py
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository || 'mpi4py/mpi4py' }}
        ref: ${{ inputs.ref }}

    - name: Install mpi4py
      run:  python -m pip install .
      env:
        CFLAGS: "-O0"

    - name: Test mpi4py (singleton)
      run:  python test/main.py -v
      if:   ${{ true }}
      timeout-minutes: 10
    - name: Test mpi4py (np=1)
      run:  mpiexec -n 1 python test/main.py -v
      if:   ${{ true }}
      timeout-minutes: 10
    - name: Test mpi4py (np=2)
      run:  mpiexec -n 2 python test/main.py -v -f
      if:   ${{ true }}
      timeout-minutes: 10
    - name: Test mpi4py (np=3)
      run:  mpiexec -n 3 python test/main.py -v -f
      if:   ${{ true }}
      timeout-minutes: 10
    - name: Test mpi4py (np=4)
      run:  mpiexec -n 4 python test/main.py -v -f
      if:   ${{ true }}
      timeout-minutes: 10
    - name: Test mpi4py (np=5)
      run:  mpiexec -n 5 python test/main.py -v -f
      if:   ${{ true }}
      timeout-minutes: 10

    - name: Test mpi4py.run
      run:  python demo/test-run/test_run.py -v
      if:   ${{ true }}
      timeout-minutes: 10

    - name: Relocate Open MPI installation
      run:  mv /opt/openmpi /opt/ompi
    - name: Update PATH and set OPAL_PREFIX and LD_LIBRARY_PATH
      run: |
        sed -i '\|/opt/openmpi/bin|d' $GITHUB_PATH
        echo OPAL_PREFIX=/opt/ompi >> $GITHUB_ENV
        echo LD_LIBRARY_PATH=/opt/ompi/lib >> $GITHUB_ENV

    - name: Test mpi4py (singleton)
      run:  python test/main.py -v
      if:   ${{ true }}
      timeout-minutes: 10

