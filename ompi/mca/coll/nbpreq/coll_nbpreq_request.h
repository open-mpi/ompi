// This file is generated by coll_nbpreq_request_h_generate.rb
// and included from coll_nbpreq_request.c

static inline void
save_func_args_allgather(mca_coll_nbpreq_request_t *req,
                         ALLGATHER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->allgather.sendbuf   = sendbuf;
    args->allgather.sendcount = sendcount;
    args->allgather.sendtype  = sendtype;
    args->allgather.recvbuf   = recvbuf;
    args->allgather.recvcount = recvcount;
    args->allgather.recvtype  = recvtype;
    args->allgather.comm      = comm;
}

static inline void
save_func_args_allgatherv(mca_coll_nbpreq_request_t *req,
                          ALLGATHERV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->allgatherv.sendbuf    = sendbuf;
    args->allgatherv.sendcount  = sendcount;
    args->allgatherv.sendtype   = sendtype;
    args->allgatherv.recvbuf    = recvbuf;
    args->allgatherv.recvcounts = recvcounts;
    args->allgatherv.displs     = displs;
    args->allgatherv.recvtype   = recvtype;
    args->allgatherv.comm       = comm;
}

static inline void
save_func_args_allreduce(mca_coll_nbpreq_request_t *req,
                         ALLREDUCE_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->allreduce.sendbuf  = sendbuf;
    args->allreduce.recvbuf  = recvbuf;
    args->allreduce.count    = count;
    args->allreduce.datatype = datatype;
    args->allreduce.op       = op;
    args->allreduce.comm     = comm;
}

static inline void
save_func_args_alltoall(mca_coll_nbpreq_request_t *req,
                        ALLTOALL_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->alltoall.sendbuf   = sendbuf;
    args->alltoall.sendcount = sendcount;
    args->alltoall.sendtype  = sendtype;
    args->alltoall.recvbuf   = recvbuf;
    args->alltoall.recvcount = recvcount;
    args->alltoall.recvtype  = recvtype;
    args->alltoall.comm      = comm;
}

static inline void
save_func_args_alltoallv(mca_coll_nbpreq_request_t *req,
                         ALLTOALLV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->alltoallv.sendbuf    = sendbuf;
    args->alltoallv.sendcounts = sendcounts;
    args->alltoallv.sdispls    = sdispls;
    args->alltoallv.sendtype   = sendtype;
    args->alltoallv.recvbuf    = recvbuf;
    args->alltoallv.recvcounts = recvcounts;
    args->alltoallv.rdispls    = rdispls;
    args->alltoallv.recvtype   = recvtype;
    args->alltoallv.comm       = comm;
}

static inline void
save_func_args_alltoallw(mca_coll_nbpreq_request_t *req,
                         ALLTOALLW_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->alltoallw.sendbuf    = sendbuf;
    args->alltoallw.sendcounts = sendcounts;
    args->alltoallw.sdispls    = sdispls;
    args->alltoallw.sendtypes  = sendtypes;
    args->alltoallw.recvbuf    = recvbuf;
    args->alltoallw.recvcounts = recvcounts;
    args->alltoallw.rdispls    = rdispls;
    args->alltoallw.recvtypes  = recvtypes;
    args->alltoallw.comm       = comm;
}

static inline void
save_func_args_barrier(mca_coll_nbpreq_request_t *req,
                       BARRIER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->barrier.comm = comm;
}

static inline void
save_func_args_bcast(mca_coll_nbpreq_request_t *req,
                     BCAST_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->bcast.buffer   = buffer;
    args->bcast.count    = count;
    args->bcast.datatype = datatype;
    args->bcast.root     = root;
    args->bcast.comm     = comm;
}

static inline void
save_func_args_exscan(mca_coll_nbpreq_request_t *req,
                      EXSCAN_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->exscan.sendbuf  = sendbuf;
    args->exscan.recvbuf  = recvbuf;
    args->exscan.count    = count;
    args->exscan.datatype = datatype;
    args->exscan.op       = op;
    args->exscan.comm     = comm;
}

static inline void
save_func_args_gather(mca_coll_nbpreq_request_t *req,
                      GATHER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->gather.sendbuf   = sendbuf;
    args->gather.sendcount = sendcount;
    args->gather.sendtype  = sendtype;
    args->gather.recvbuf   = recvbuf;
    args->gather.recvcount = recvcount;
    args->gather.recvtype  = recvtype;
    args->gather.root      = root;
    args->gather.comm      = comm;
}

static inline void
save_func_args_gatherv(mca_coll_nbpreq_request_t *req,
                       GATHERV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->gatherv.sendbuf    = sendbuf;
    args->gatherv.sendcount  = sendcount;
    args->gatherv.sendtype   = sendtype;
    args->gatherv.recvbuf    = recvbuf;
    args->gatherv.recvcounts = recvcounts;
    args->gatherv.displs     = displs;
    args->gatherv.recvtype   = recvtype;
    args->gatherv.root       = root;
    args->gatherv.comm       = comm;
}

static inline void
save_func_args_reduce(mca_coll_nbpreq_request_t *req,
                      REDUCE_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->reduce.sendbuf  = sendbuf;
    args->reduce.recvbuf  = recvbuf;
    args->reduce.count    = count;
    args->reduce.datatype = datatype;
    args->reduce.op       = op;
    args->reduce.root     = root;
    args->reduce.comm     = comm;
}

static inline void
save_func_args_reducescatter(mca_coll_nbpreq_request_t *req,
                             REDUCESCATTER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->reducescatter.sendbuf    = sendbuf;
    args->reducescatter.recvbuf    = recvbuf;
    args->reducescatter.recvcounts = recvcounts;
    args->reducescatter.datatype   = datatype;
    args->reducescatter.op         = op;
    args->reducescatter.comm       = comm;
}

static inline void
save_func_args_reducescatterblock(mca_coll_nbpreq_request_t *req,
                                  REDUCESCATTERBLOCK_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->reducescatterblock.sendbuf   = sendbuf;
    args->reducescatterblock.recvbuf   = recvbuf;
    args->reducescatterblock.recvcount = recvcount;
    args->reducescatterblock.datatype  = datatype;
    args->reducescatterblock.op        = op;
    args->reducescatterblock.comm      = comm;
}

static inline void
save_func_args_scan(mca_coll_nbpreq_request_t *req,
                    SCAN_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->scan.sendbuf  = sendbuf;
    args->scan.recvbuf  = recvbuf;
    args->scan.count    = count;
    args->scan.datatype = datatype;
    args->scan.op       = op;
    args->scan.comm     = comm;
}

static inline void
save_func_args_scatter(mca_coll_nbpreq_request_t *req,
                       SCATTER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->scatter.sendbuf   = sendbuf;
    args->scatter.sendcount = sendcount;
    args->scatter.sendtype  = sendtype;
    args->scatter.recvbuf   = recvbuf;
    args->scatter.recvcount = recvcount;
    args->scatter.recvtype  = recvtype;
    args->scatter.root      = root;
    args->scatter.comm      = comm;
}

static inline void
save_func_args_scatterv(mca_coll_nbpreq_request_t *req,
                        SCATTERV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->scatterv.sendbuf    = sendbuf;
    args->scatterv.sendcounts = sendcounts;
    args->scatterv.displs     = displs;
    args->scatterv.sendtype   = sendtype;
    args->scatterv.recvbuf    = recvbuf;
    args->scatterv.recvcount  = recvcount;
    args->scatterv.recvtype   = recvtype;
    args->scatterv.root       = root;
    args->scatterv.comm       = comm;
}

static inline void
save_func_args_neighbor_allgather(mca_coll_nbpreq_request_t *req,
                                  NEIGHBOR_ALLGATHER_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->neighbor_allgather.sendbuf   = sendbuf;
    args->neighbor_allgather.sendcount = sendcount;
    args->neighbor_allgather.sendtype  = sendtype;
    args->neighbor_allgather.recvbuf   = recvbuf;
    args->neighbor_allgather.recvcount = recvcount;
    args->neighbor_allgather.recvtype  = recvtype;
    args->neighbor_allgather.comm      = comm;
}

static inline void
save_func_args_neighbor_allgatherv(mca_coll_nbpreq_request_t *req,
                                   NEIGHBOR_ALLGATHERV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->neighbor_allgatherv.sendbuf    = sendbuf;
    args->neighbor_allgatherv.sendcount  = sendcount;
    args->neighbor_allgatherv.sendtype   = sendtype;
    args->neighbor_allgatherv.recvbuf    = recvbuf;
    args->neighbor_allgatherv.recvcounts = recvcounts;
    args->neighbor_allgatherv.displs     = displs;
    args->neighbor_allgatherv.recvtype   = recvtype;
    args->neighbor_allgatherv.comm       = comm;
}

static inline void
save_func_args_neighbor_alltoall(mca_coll_nbpreq_request_t *req,
                                 NEIGHBOR_ALLTOALL_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->neighbor_alltoall.sendbuf   = sendbuf;
    args->neighbor_alltoall.sendcount = sendcount;
    args->neighbor_alltoall.sendtype  = sendtype;
    args->neighbor_alltoall.recvbuf   = recvbuf;
    args->neighbor_alltoall.recvcount = recvcount;
    args->neighbor_alltoall.recvtype  = recvtype;
    args->neighbor_alltoall.comm      = comm;
}

static inline void
save_func_args_neighbor_alltoallv(mca_coll_nbpreq_request_t *req,
                                  NEIGHBOR_ALLTOALLV_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->neighbor_alltoallv.sendbuf    = sendbuf;
    args->neighbor_alltoallv.sendcounts = sendcounts;
    args->neighbor_alltoallv.sdispls    = sdispls;
    args->neighbor_alltoallv.sendtype   = sendtype;
    args->neighbor_alltoallv.recvbuf    = recvbuf;
    args->neighbor_alltoallv.recvcounts = recvcounts;
    args->neighbor_alltoallv.rdispls    = rdispls;
    args->neighbor_alltoallv.recvtype   = recvtype;
    args->neighbor_alltoallv.comm       = comm;
}

static inline void
save_func_args_neighbor_alltoallw(mca_coll_nbpreq_request_t *req,
                                  NEIGHBOR_ALLTOALLW_BASE_ARGS)
{
    mca_coll_nbpreq_func_args_t *args = &req->func_args;
    args->neighbor_alltoallw.sendbuf    = sendbuf;
    args->neighbor_alltoallw.sendcounts = sendcounts;
    args->neighbor_alltoallw.sdispls    = sdispls;
    args->neighbor_alltoallw.sendtypes  = sendtypes;
    args->neighbor_alltoallw.recvbuf    = recvbuf;
    args->neighbor_alltoallw.recvcounts = recvcounts;
    args->neighbor_alltoallw.rdispls    = rdispls;
    args->neighbor_alltoallw.recvtypes  = recvtypes;
    args->neighbor_alltoallw.comm       = comm;
}

static inline int
call_nb_func_allgather(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iallgather(
               req->func_args.allgather.sendbuf,
               req->func_args.allgather.sendcount,
               req->func_args.allgather.sendtype,
               req->func_args.allgather.recvbuf,
               req->func_args.allgather.recvcount,
               req->func_args.allgather.recvtype,
               req->func_args.allgather.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iallgather_module);
}

static inline int
call_nb_func_allgatherv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iallgatherv(
               req->func_args.allgatherv.sendbuf,
               req->func_args.allgatherv.sendcount,
               req->func_args.allgatherv.sendtype,
               req->func_args.allgatherv.recvbuf,
               req->func_args.allgatherv.recvcounts,
               req->func_args.allgatherv.displs,
               req->func_args.allgatherv.recvtype,
               req->func_args.allgatherv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iallgatherv_module);
}

static inline int
call_nb_func_allreduce(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iallreduce(
               req->func_args.allreduce.sendbuf,
               req->func_args.allreduce.recvbuf,
               req->func_args.allreduce.count,
               req->func_args.allreduce.datatype,
               req->func_args.allreduce.op,
               req->func_args.allreduce.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iallreduce_module);
}

static inline int
call_nb_func_alltoall(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ialltoall(
               req->func_args.alltoall.sendbuf,
               req->func_args.alltoall.sendcount,
               req->func_args.alltoall.sendtype,
               req->func_args.alltoall.recvbuf,
               req->func_args.alltoall.recvcount,
               req->func_args.alltoall.recvtype,
               req->func_args.alltoall.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ialltoall_module);
}

static inline int
call_nb_func_alltoallv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ialltoallv(
               req->func_args.alltoallv.sendbuf,
               req->func_args.alltoallv.sendcounts,
               req->func_args.alltoallv.sdispls,
               req->func_args.alltoallv.sendtype,
               req->func_args.alltoallv.recvbuf,
               req->func_args.alltoallv.recvcounts,
               req->func_args.alltoallv.rdispls,
               req->func_args.alltoallv.recvtype,
               req->func_args.alltoallv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ialltoallv_module);
}

static inline int
call_nb_func_alltoallw(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ialltoallw(
               req->func_args.alltoallw.sendbuf,
               req->func_args.alltoallw.sendcounts,
               req->func_args.alltoallw.sdispls,
               req->func_args.alltoallw.sendtypes,
               req->func_args.alltoallw.recvbuf,
               req->func_args.alltoallw.recvcounts,
               req->func_args.alltoallw.rdispls,
               req->func_args.alltoallw.recvtypes,
               req->func_args.alltoallw.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ialltoallw_module);
}

static inline int
call_nb_func_barrier(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ibarrier(
               req->func_args.barrier.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ibarrier_module);
}

static inline int
call_nb_func_bcast(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ibcast(
               req->func_args.bcast.buffer,
               req->func_args.bcast.count,
               req->func_args.bcast.datatype,
               req->func_args.bcast.root,
               req->func_args.bcast.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ibcast_module);
}

static inline int
call_nb_func_exscan(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iexscan(
               req->func_args.exscan.sendbuf,
               req->func_args.exscan.recvbuf,
               req->func_args.exscan.count,
               req->func_args.exscan.datatype,
               req->func_args.exscan.op,
               req->func_args.exscan.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iexscan_module);
}

static inline int
call_nb_func_gather(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_igather(
               req->func_args.gather.sendbuf,
               req->func_args.gather.sendcount,
               req->func_args.gather.sendtype,
               req->func_args.gather.recvbuf,
               req->func_args.gather.recvcount,
               req->func_args.gather.recvtype,
               req->func_args.gather.root,
               req->func_args.gather.comm,
               &req->nb_request,
               req->comm->c_coll->coll_igather_module);
}

static inline int
call_nb_func_gatherv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_igatherv(
               req->func_args.gatherv.sendbuf,
               req->func_args.gatherv.sendcount,
               req->func_args.gatherv.sendtype,
               req->func_args.gatherv.recvbuf,
               req->func_args.gatherv.recvcounts,
               req->func_args.gatherv.displs,
               req->func_args.gatherv.recvtype,
               req->func_args.gatherv.root,
               req->func_args.gatherv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_igatherv_module);
}

static inline int
call_nb_func_reduce(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ireduce(
               req->func_args.reduce.sendbuf,
               req->func_args.reduce.recvbuf,
               req->func_args.reduce.count,
               req->func_args.reduce.datatype,
               req->func_args.reduce.op,
               req->func_args.reduce.root,
               req->func_args.reduce.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ireduce_module);
}

static inline int
call_nb_func_reducescatter(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ireduce_scatter(
               req->func_args.reducescatter.sendbuf,
               req->func_args.reducescatter.recvbuf,
               req->func_args.reducescatter.recvcounts,
               req->func_args.reducescatter.datatype,
               req->func_args.reducescatter.op,
               req->func_args.reducescatter.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ireduce_scatter_module);
}

static inline int
call_nb_func_reducescatterblock(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ireduce_scatter_block(
               req->func_args.reducescatterblock.sendbuf,
               req->func_args.reducescatterblock.recvbuf,
               req->func_args.reducescatterblock.recvcount,
               req->func_args.reducescatterblock.datatype,
               req->func_args.reducescatterblock.op,
               req->func_args.reducescatterblock.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ireduce_scatter_block_module);
}

static inline int
call_nb_func_scan(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iscan(
               req->func_args.scan.sendbuf,
               req->func_args.scan.recvbuf,
               req->func_args.scan.count,
               req->func_args.scan.datatype,
               req->func_args.scan.op,
               req->func_args.scan.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iscan_module);
}

static inline int
call_nb_func_scatter(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iscatter(
               req->func_args.scatter.sendbuf,
               req->func_args.scatter.sendcount,
               req->func_args.scatter.sendtype,
               req->func_args.scatter.recvbuf,
               req->func_args.scatter.recvcount,
               req->func_args.scatter.recvtype,
               req->func_args.scatter.root,
               req->func_args.scatter.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iscatter_module);
}

static inline int
call_nb_func_scatterv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_iscatterv(
               req->func_args.scatterv.sendbuf,
               req->func_args.scatterv.sendcounts,
               req->func_args.scatterv.displs,
               req->func_args.scatterv.sendtype,
               req->func_args.scatterv.recvbuf,
               req->func_args.scatterv.recvcount,
               req->func_args.scatterv.recvtype,
               req->func_args.scatterv.root,
               req->func_args.scatterv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_iscatterv_module);
}

static inline int
call_nb_func_neighbor_allgather(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ineighbor_allgather(
               req->func_args.neighbor_allgather.sendbuf,
               req->func_args.neighbor_allgather.sendcount,
               req->func_args.neighbor_allgather.sendtype,
               req->func_args.neighbor_allgather.recvbuf,
               req->func_args.neighbor_allgather.recvcount,
               req->func_args.neighbor_allgather.recvtype,
               req->func_args.neighbor_allgather.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ineighbor_allgather_module);
}

static inline int
call_nb_func_neighbor_allgatherv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ineighbor_allgatherv(
               req->func_args.neighbor_allgatherv.sendbuf,
               req->func_args.neighbor_allgatherv.sendcount,
               req->func_args.neighbor_allgatherv.sendtype,
               req->func_args.neighbor_allgatherv.recvbuf,
               req->func_args.neighbor_allgatherv.recvcounts,
               req->func_args.neighbor_allgatherv.displs,
               req->func_args.neighbor_allgatherv.recvtype,
               req->func_args.neighbor_allgatherv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ineighbor_allgatherv_module);
}

static inline int
call_nb_func_neighbor_alltoall(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ineighbor_alltoall(
               req->func_args.neighbor_alltoall.sendbuf,
               req->func_args.neighbor_alltoall.sendcount,
               req->func_args.neighbor_alltoall.sendtype,
               req->func_args.neighbor_alltoall.recvbuf,
               req->func_args.neighbor_alltoall.recvcount,
               req->func_args.neighbor_alltoall.recvtype,
               req->func_args.neighbor_alltoall.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ineighbor_alltoall_module);
}

static inline int
call_nb_func_neighbor_alltoallv(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ineighbor_alltoallv(
               req->func_args.neighbor_alltoallv.sendbuf,
               req->func_args.neighbor_alltoallv.sendcounts,
               req->func_args.neighbor_alltoallv.sdispls,
               req->func_args.neighbor_alltoallv.sendtype,
               req->func_args.neighbor_alltoallv.recvbuf,
               req->func_args.neighbor_alltoallv.recvcounts,
               req->func_args.neighbor_alltoallv.rdispls,
               req->func_args.neighbor_alltoallv.recvtype,
               req->func_args.neighbor_alltoallv.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ineighbor_alltoallv_module);
}

static inline int
call_nb_func_neighbor_alltoallw(mca_coll_nbpreq_request_t *req)
{
    return req->comm->c_coll->coll_ineighbor_alltoallw(
               req->func_args.neighbor_alltoallw.sendbuf,
               req->func_args.neighbor_alltoallw.sendcounts,
               req->func_args.neighbor_alltoallw.sdispls,
               req->func_args.neighbor_alltoallw.sendtypes,
               req->func_args.neighbor_alltoallw.recvbuf,
               req->func_args.neighbor_alltoallw.recvcounts,
               req->func_args.neighbor_alltoallw.rdispls,
               req->func_args.neighbor_alltoallw.recvtypes,
               req->func_args.neighbor_alltoallw.comm,
               &req->nb_request,
               req->comm->c_coll->coll_ineighbor_alltoallw_module);
}

static inline int
call_nb_func(mca_coll_nbpreq_request_t *req)
{
    switch (req->coll_type) {
    case ALLGATHER:
        return call_nb_func_allgather(req);
    case ALLGATHERV:
        return call_nb_func_allgatherv(req);
    case ALLREDUCE:
        return call_nb_func_allreduce(req);
    case ALLTOALL:
        return call_nb_func_alltoall(req);
    case ALLTOALLV:
        return call_nb_func_alltoallv(req);
    case ALLTOALLW:
        return call_nb_func_alltoallw(req);
    case BARRIER:
        return call_nb_func_barrier(req);
    case BCAST:
        return call_nb_func_bcast(req);
    case EXSCAN:
        return call_nb_func_exscan(req);
    case GATHER:
        return call_nb_func_gather(req);
    case GATHERV:
        return call_nb_func_gatherv(req);
    case REDUCE:
        return call_nb_func_reduce(req);
    case REDUCESCATTER:
        return call_nb_func_reducescatter(req);
    case REDUCESCATTERBLOCK:
        return call_nb_func_reducescatterblock(req);
    case SCAN:
        return call_nb_func_scan(req);
    case SCATTER:
        return call_nb_func_scatter(req);
    case SCATTERV:
        return call_nb_func_scatterv(req);
    case NEIGHBOR_ALLGATHER:
        return call_nb_func_neighbor_allgather(req);
    case NEIGHBOR_ALLGATHERV:
        return call_nb_func_neighbor_allgatherv(req);
    case NEIGHBOR_ALLTOALL:
        return call_nb_func_neighbor_alltoall(req);
    case NEIGHBOR_ALLTOALLV:
        return call_nb_func_neighbor_alltoallv(req);
    case NEIGHBOR_ALLTOALLW:
        return call_nb_func_neighbor_alltoallw(req);
    default:
        return OMPI_ERROR;
    }
}
