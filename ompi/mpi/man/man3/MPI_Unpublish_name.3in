.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2007-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Unpublish_name 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"

.SH NAME
.nf
\fBMPI_Unpublish_name\fP \- Unpublishes a service name

.fi
.SH SYNTAX
.ft R

.SH C Syntax
.nf
#include <mpi.h>
int MPI_Unpublish_name(const char *\fIservice_name\fP, MPI_Info \fIinfo\fP,
	const char *\fIport_name\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_UNPUBLISH_NAME(\fISERVICE_NAME, INFO, PORT_NAME, IERROR\fP)
	CHARACTER*(*)	\fISERVICE_NAME, PORT_NAME\fP
	INTEGER		\fIINFO, IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Unpublish_name(\fIservice_name\fP, \fIinfo\fP, \fIport_name\fP, \fIierror\fP)
	CHARACTER(LEN=*), INTENT(IN) :: \fIservice_name\fP, \fIport_name\fP
	TYPE(MPI_Info), INTENT(IN) :: \fIinfo\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void MPI::Unpublish_name(const char* \fIservice_name\fP, const MPI::Info& \fIinfo\fP,
	char* \fIport_name\fP)

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1.4i
service_name
A service name (string).
.TP 1.4i
info
Options to the name service functions (handle).
.ft R
.TP 1.4i
port_name
A port name (string).

.SH OUTPUT PARAMETER
.TP 1.4i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
This routine removes the pair (\fIservice_name, port_name\fP) so that
applications may no longer retrieve \fIport_name\fP by calling
MPI_Lookup_name. It is an error to unpublish a \fIservice_name\fP
that was not published via MPI_Publish_name. Both the \fIservice_name\fP
and \fIport_name\fP arguments to MPI_Unpublish_name must be identical
to the arguments to the previous call to MPI_Publish_name.

.SH INFO ARGUMENTS
The following keys for \fIinfo\fP are recognized:
.sp
.sp
.nf
Key                   Type      Description
---                   ----      -----------

ompi_global_scope     bool      If set to true, unpublish the name from
                                the global scope.  Unpublish from the local
                                scope otherwise.  See the NAME SCOPE
                                section for more details.

.fi

.sp
\fIbool\fP info keys are actually strings but are evaluated as
follows: if the string value is a number, it is converted to an
integer and cast to a boolean (meaning that zero integers are false
and non-zero values are true).  If the string value is
(case-insensitive) "yes" or "true", the boolean is true.  If the
string value is (case-insensitive) "no" or "false", the boolean is
false.  All other string values are unrecognized, and therefore false.
.PP
If no info key is provided, the function will first check to see if a
global server has been specified and is available. If so, then the
unpublish function will default to global scope first, followed by local. Otherwise,
the data will default to unpublish with local scope.

.SH NAME SCOPE
Open MPI supports two name scopes: \fIglobal\fP and \fIlocal\fP. Local scope
values are placed in a data store located on the mpirun of the calling
process' job, while global scope values reside on a central server. Calls
to MPI_Unpublish_name must correctly specify the scope to be used in
finding the value to be removed. The function will return an error if
the specified service name is not found on the indicated location.
.sp
For a more detailed description of scoping rules, please see the MPI_Publish_name
man page.

.SH ERRORS
.ft R
Almost all MPI routines return an error value; C routines as
the value of the function and Fortran routines in the last argument. C++
functions do not return errors. If the default error handler is set to
MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
See the MPI man page for a full list of MPI error codes.

.SH SEE ALSO
.ft R
.nf
MPI_Publish_name
MPI_Lookup_name
MPI_Open_port


