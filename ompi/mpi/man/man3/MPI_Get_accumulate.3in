.\" -*- nroff -*-
.\" Copyright 2013-2014 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Get_accumulate 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Get_accumulate\fP, \fBMPI_Rget_accumulate\fP \- Combines the contents of the origin buffer with that of a target buffer and returns the target buffer value.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Get_accumulate(const void *\fIorigin_addr\fP, int \fIorigin_count\fP,
	MPI_Datatype \fIorigin_datatype\fP, void *\fIresult_addr\fP,
	int \fIresult_count\fP, MPI_Datatype \fIresult_datatype\fP,
	int \fItarget_rank\fP, MPI_Aint \fItarget_disp\fP, int \fItarget_count\fP,
	MPI_Datatype \fItarget_datatype\fP, MPI_Op \fIop\fP, MPI_Win \fIwin\fP)

int MPI_Rget_accumulate(const void *\fIorigin_addr\fP, int \fIorigin_count\fP,
	MPI_Datatype \fIorigin_datatype\fP, void *\fIresult_addr\fP,
	int \fIresult_count\fP, MPI_Datatype \fIresult_datatype\fP,
	int \fItarget_rank\fP, MPI_Aint \fItarget_disp\fP, int \fItarget_count\fP,
	MPI_Datatype \fItarget_datatype\fP, MPI_Op \fIop\fP, MPI_Win \fIwin\fP,
	MPI_Request *\fIrequest\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_GET_ACCUMULATE(\fIORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,
        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,
        TARGET_DATATYPE, OP, WIN, IERROR\fP)
	<type> \fIORIGIN_ADDR\fP, \fIRESULT_ADDR\fP(*)
	INTEGER(KIND=MPI_ADDRESS_KIND) \fITARGET_DISP\fP
	INTEGER \fIORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR \fP

MPI_RGET_ACCUMULATE(\fIORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,
        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,
        TARGET_DATATYPE, OP, WIN, REQUEST, IERROR\fP)
	<type> \fIORIGIN_ADDR\fP, \fIRESULT_ADDR\fP(*)
	INTEGER(KIND=MPI_ADDRESS_KIND) \fITARGET_DISP\fP
	INTEGER \fIORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR \fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Get_accumulate(\fIorigin_addr\fP, \fIorigin_count\fP, \fIorigin_datatype\fP, \fIresult_addr\fP,
		\fIresult_count\fP, \fIresult_datatype\fP, \fItarget_rank\fP, \fItarget_disp\fP,
		\fItarget_count\fP, \fItarget_datatype\fP, \fIop\fP, \fIwin\fP, \fIierror\fP)
	TYPE(*), DIMENSION(..), INTENT(IN) :: \fIorigin_addr\fP
	TYPE(*), DIMENSION(..) :: \fIresult_addr\fP
	INTEGER, INTENT(IN) :: \fIorigin_count\fP, \fIresult_count\fP, \fItarget_rank\fP, \fItarget_count\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIorigin_datatype\fP, \fItarget_datatype\fP, \fIresult_datatype\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: \fItarget_dist\fP
	TYPE(MPI_Op), INTENT(IN) :: \fIop\fP
	TYPE(MPI_Win), INTENT(IN) :: \fIwin\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

MPI_Rget_accumulate(\fIorigin_addr\fP, \fIorigin_count\fP, \fIorigin_datatype\fP,
		\fIresult_addr\fP, \fIresult_count\fP, \fIresult_datatype\fP, \fItarget_rank\fP,
		\fItarget_disp\fP, \fItarget_count\fP, \fItarget_datatype\fP, \fIop\fP, \fIwin\fP, \fIrequest\fP,
		\fIierror\fP)
	TYPE(*), DIMENSION(..), INTENT(IN) :: \fIorigin_addr\fP
	TYPE(*), DIMENSION(..) :: \fIresult_addr\fP
	INTEGER, INTENT(IN) :: \fIorigin_count\fP, \fIresult_count\fP, \fItarget_rank\fP, \fItarget_count\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIorigin_datatype\fP, \fItarget_datatype\fP, \fIresult_datatype\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: \fItarget_dist\fP
	TYPE(MPI_Op), INTENT(IN) :: \fIop\fP
	TYPE(MPI_Win), INTENT(IN) :: \fIwin\fP
	TYPE(MPI_Request), INTENT(OUT) :: \fIrequest\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
origin_addr
Initial address of buffer (choice).
.ft R
.TP 1i
origin_count
Number of entries in buffer (nonnegative integer).
.ft R
.TP 1i
origin_datatype
Data type of each buffer entry (handle).
.ft R
.TP
result_addr
Initial address of result buffer (choice).
.ft R
.TP
result_count
Number of entries in result buffer (nonnegative integer).
.ft R
.TP
result_datatype
Data type of each result buffer entry (handle).
.ft R
.TP 1i
target_rank
Rank of target (nonnegative integer).
.ft R
.TP 1i
target_disp
Displacement from start of window to beginning of target buffer (nonnegative integer).
.ft R
.TP 1i
target_count
Number of entries in target buffer (nonnegative integer).
.ft R
.TP 1i
target_datatype
Data type of each entry in target buffer (handle).
.ft R
.TP 1i
op
Reduce operation (handle).
.ft R
.TP 1i
win
Window object (handle).

.SH OUTPUT PARAMETER
.ft R
.TP 1i
MPI_Rget_accumulate: RMA request
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
\fBMPI_Get_accumulate\fP is a function used for one-sided MPI communication that adds the contents of the origin buffer (as defined by \fIorigin_addr\fP, \fIorigin_count\fP, and \fIorigin_datatype\fP) to the buffer specified by the arguments \fItarget_count\fP and \fItarget_datatype\fP, at offset \fItarget_disp\fP, in the target window specified by \fItarget_rank\fP and \fIwin\fP, using the operation \fIop\fP. \fBMPI_Get_accumulate\fP returns in the result buffer \fIresult_addr\fP the contents of the target buffer before the accumulation.
.sp
Any of the predefined operations for MPI_Reduce, as well as MPI_NO_OP, can be used. User-defined functions cannot be used. For example, if \fIop\fP is MPI_SUM, each element of the origin buffer is added to the corresponding element in the target, replacing the former value in the target.
.sp
Each datatype argument must be a predefined data type or a derived data type, where all basic components are of the same predefined data type. Both datatype arguments must be constructed from the same predefined data type. The operation \fIop\fP applies to elements of that predefined type. The \fItarget_datatype\fP argument must not specify overlapping entries, and the target buffer must fit in the target window.
.sp
A new predefined operation, MPI_REPLACE, is defined. It corresponds to the associative function f(a, b) =b; that is, the current value in the target memory is replaced by the value supplied by the origin.
.sp
A new predefined operation, MPI_NO_OP, is defined. It corresponds to the assiciative function f(a, b) = a; that is the current value in the target memory is returned in the result buffer at the origin and no operation is performed on the target buffer.
.sp
\fBMPI_Rget_accumulate\fP is similar to \fBMPI_Get_accumulate\fP, except that it allocates a communication request object and associates it with the request handle (the argument \fIrequest\fP) that can be used to wait or test for completion. The completion of an \fBMPI_Rget_accumulate\fP operation indicates that the data is available in the result buffer and the origin buffer is free to be updated. It does not indicate that the operation has been completed at the target window.

.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fITARGET_DISP\fP argument only for Fortran 90.  FORTRAN 77
users may use the non-portable syntax
.sp
.nf
     INTEGER*MPI_ADDRESS_KIND \fITARGET_DISP\fP
.fi
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h
and gives the length of the declared integer in bytes.

.SH NOTES
The generic functionality of \fBMPI_Get_accumulate\fP might limit the performance of fetch-and-increment or fetch-and-add calls that might be supported by special hardware operations. MPI_Fetch_and_op thus allows for a fast implementation of a commonly used subset of the functionality of \fBMPI_Get_accumulate\fP.
.sp
MPI_Get is a special case of \fBMPI_Get_accumulate\fP, with the operation MPI_NO_OP. Note, however, that MPI_Get and \fBMPI_Get_accumulate\fP have different constraints on concurrent updates.
.sp
It is the user's responsibility to guarantee that, when
using the accumulate functions, the target displacement argument is such
that accesses to the window are properly aligned according to the data
type arguments in the call to the \fBMPI_Get_accumulate\fP function.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler
may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Put
MPI_Get
MPI_Accumulate
MPI_Fetch_and_op
.br
MPI_Reduce
