.\" -*- nroff -*-
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_File_read 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_File_read\fP \- Reads a file starting at the location specified by the individual file pointer (blocking, noncollective).

.SH SYNTAX
.ft R
.nf
C Syntax
    #include <mpi.h>
    int MPI_File_read(MPI_File \fIfh\fP, void \fI*buf\fP,
    	      int \fIcount\fP, MPI_Datatype \fIdatatype\fP, MPI_Status \fI*status\fP)

.fi
.SH Fortran Syntax
.nf
    INCLUDE 'mpif.h'
    MPI_FILE_READ(\fI FH\fP, \fI BUF\fP, \fICOUNT\fP,
    	      \fI DATATYPE\fP, \fISTATUS\fP, \fIIERROR\fP)
	 <type>         BUF(*)
    	 INTEGER	FH, COUNT, DATATYPE, STATUS(MPI_STATUS_SIZE),
			IERROR

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void MPI::File::Read(void* \fIbuf\fP, int \fIcount\fP,
	const MPI::Datatype& \fIdatatype\fP, MPI::Status& \fIstatus\fP)

void MPI::File::Read(void* \fIbuf\fP, int \fIcount\fP,
	const MPI::Datatype& \fIdatatype\fP)

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
fh
File handle (handle).
.TP 1i
count
Number of elements in buffer (integer).
.TP 1i
datatype
Data type of each buffer element (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
buf
Initial address of buffer (integer).
.TP 1i
status
Status object (status).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_File_read attempts to read from the file associated with
.I fh
(at the current individual file pointer position maintained by the system) a total number of
.I count
data items having
.I datatype
type into the user's buffer
.I buf.
The data is taken out of those parts of the
file specified by the current view. MPI_File_read stores the
number of data-type elements actually read in
.I status.
All other fields of
.I status
are undefined.
.sp
It is erroneous to call this function if MPI_MODE_SEQUENTIAL mode was specified when the file was opened.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to MPI_ERRORS_RETURN. The error handler may be changed with MPI_File_set_errhandler; the predefined error handler MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI does not guarantee that an MPI program can continue past an error.

