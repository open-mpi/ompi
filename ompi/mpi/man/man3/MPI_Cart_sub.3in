.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Cart_sub 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Cart_sub \fP \- Partitions a communicator into subgroups, which form lower-dimensional Cartesian subgrids.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Cart_sub(MPI_Comm \fIcomm\fP, const int\fI remain_dims\fP[], MPI_Comm\fI *comm_new\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_CART_SUB(\fICOMM, REMAIN_DIMS, COMM_NEW, IERROR\fP)
	INTEGER	\fICOMM, COMM_NEW, IERROR\fP
	LOGICAL	\fIREMAIN_DIMS\fP(*)

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Cart_sub(\fIcomm\fP, \fIremain_dims\fP, \fInewcomm\fP, \fIierror\fP)
	TYPE(MPI_Comm), INTENT(IN) :: \fIcomm\fP
	LOGICAL, INTENT(IN) :: \fIremain_dims(*)\fP
	TYPE(MPI_Comm), INTENT(OUT) :: \fInewcomm\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
Cartcomm Cartcomm::Sub(const bool \fIremain_dims\fP[]) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
comm
Communicator with Cartesian structure (handle).
.TP 1i
remain_dims
The ith entry of remain_dims specifies whether the ith dimension is kept in the subgrid (true) or is dropped (false) (logical vector).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
comm_new
Communicator containing the subgrid that includes the calling process (handle).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
If a Cartesian topology has been created with MPI_Cart_create, the function  MPI_Cart_sub can be used to partition the communicator group into subgroups that form lower-dimensional Cartesian subgrids, and to build for each subgroup a communicator with the associated subgrid Cartesian topology. (This function is closely related to MPI_Comm_split.)
.sp
\fBExample:\fP Assume that  MPI_Cart_create( \&..., comm) has defined a (2 x 3 x 4)   grid. Let  remain_dims = (true, false, true). Then a call to
.sp
.nf
    MPI_Cart_sub(comm, remain_dims, comm_new)
.fi
.sp
will create three communicators, each with eight processes in a 2 x 4 Cartesian topology. If remain_dims = (false, false, true) then the call to MPI_Cart_sub(comm, remain_dims, comm_new) will create six nonoverlapping communicators, each with four processes, in a one-dimensional Cartesian topology.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
.nf
MPI_Cart_create
MPI_Comm_split

