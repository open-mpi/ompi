.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Sendrecv 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Sendrecv\fP \- Sends and receives a message.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Sendrecv(const void *\fIsendbuf\fP, int\fI sendcount\fP, MPI_Datatype\fI sendtype\fP,
	int\fI dest\fP, int\fI sendtag\fP, void\fI *recvbuf\fP, int\fI recvcount\fP,
	MPI_Datatype\fI recvtype\fP, int\fI source\fP, int\fI recvtag\fP,
	MPI_Comm\fI comm\fP, MPI_Status\fI *status\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_SENDRECV(\fISENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG,
		RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM,
		STATUS, IERROR\fP)
	<type>	\fISENDBUF(*), RECVBUF(*)\fP
	INTEGER	\fISENDCOUNT, SENDTYPE, DEST, SENDTAG\fP
	INTEGER	\fIRECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM\fP
	INTEGER	\fISTATUS(MPI_STATUS_SIZE), IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Sendrecv(\fIsendbuf\fP, \fIsendcount\fP, \fIsendtype\fP, \fIdest\fP, \fIsendtag\fP, \fIrecvbuf\fP,
		\fIrecvcount\fP, \fIrecvtype\fP, \fIsource\fP, \fIrecvtag\fP, \fIcomm\fP, \fIstatus\fP, \fIierror\fP)
	TYPE(*), DIMENSION(..), INTENT(IN) :: \fIsendbuf\fP
	TYPE(*), DIMENSION(..) :: \fIrecvbuf\fP
	INTEGER, INTENT(IN) :: \fIsendcount\fP, \fIdest\fP, \fIsendtag\fP, \fIrecvcount\fP, \fIsource,\fP
	\fIrecvtag\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIsendtype\fP, \fIrecvtype\fP
	TYPE(MPI_Comm), INTENT(IN) :: \fIcomm\fP
	TYPE(MPI_Status) :: \fIstatus\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void Comm::Sendrecv(const void *\fIsendbuf\fP, int \fIsendcount\fP, const
	Datatype& \fIsendtype\fP, int \fIdest\fP, int \fIsendtag\fP, void *\fIrecvbuf\fP,
	int \fIrecvcount\fP, const Datatype& \fIrecvtype\fP, int \fIsource\fP,
	int \fIrecvtag\fP, Status& \fIstatus\fP) const

void Comm::Sendrecv(const void *\fIsendbuf\fP, int \fIsendcount\fP, const
	Datatype& \fIsendtype\fP, int \fIdest\fP, int \fIsendtag\fP, void *\fIrecvbuf\fP,
	int \fIrecvcount\fP, const Datatype& \fIrecvtype\fP, int \fIsource\fP,
	int \fIrecvtag\fP) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
sendbuf
Initial address of send buffer (choice).
.TP 1i
sendcount
Number of elements to send (integer).
.TP 1i
sendtype
Type of elements in send buffer (handle).
.TP 1i
dest
Rank of destination (integer).
.TP 1i
sendtag
Send tag (integer).
.TP 1i
recvcount
Maximum number of elements to receive (integer).
.TP 1i
recvtype
Type of elements in receive buffer (handle).
.TP 1i
source
Rank of source (integer).
.TP 1i
recvtag
Receive tag (integer).
.TP 1i
comm
Communicator (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
recvbuf
Initial address of receive buffer (choice).
.TP 1i
status
Status object (status). This refers to the receive operation.
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
The send-receive operations combine in one call the sending of a message to one destination and the receiving of another message, from another process. The two (source and destination) are possibly the same. A send-receive operation is useful for executing a shift operation across a chain of processes. If blocking sends and receives are used for such a shift, then one needs to order the sends and receives correctly (for example, even processes send, then receive; odd processes receive first, then send) in order to prevent cyclic dependencies that may lead to deadlock. When a send-receive operation is used, the communication subsystem takes care of these issues. The send-receive operation can be used in conjunction with the functions described in Chapter 6 of the MPI-1 Standard, "Process Topologies," in order to perform shifts on various logical topologies. Also, a send-receive operation is useful for implementing remote procedure calls.
.sp
A message sent by a send-receive operation can be received by a regular receive operation or probed by a probe operation; a send-receive operation can receive a message sent by a regular send operation.
.sp
MPI_Sendrecv executes a blocking send and receive operation. Both send and receive use the same communicator, but possibly different tags. The send buffer and receive buffers must be disjoint, and may have different lengths and datatypes.
.sp
If your application does not need to examine the \fIstatus\fP field, you can save resources by using the predefined constant MPI_STATUS_IGNORE as a special value for the \fIstatus\fP argument.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Sendrecv_replace


