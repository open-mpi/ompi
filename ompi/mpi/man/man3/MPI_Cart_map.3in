.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Cart_map 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Cart_map \fP \-  Maps process to Cartesian topology information.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Cart_map(MPI_Comm \fIcomm\fP, int\fI ndims\fP, const int\fI dims\fP[],
	const int\fI periods\fP[], int\fI *newrank\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_CART_MAP(\fICOMM, NDIMS, DIMS, PERIODS, NEWRANK, IERROR\fP)
	INTEGER	\fICOMM, NDIMS, DIMS(*), NEWRANK, IERROR\fP
	LOGICAL	\fIPERIODS\fP(*)

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Cart_map(\fIcomm\fP, \fIndims\fP, \fIdims\fP, \fIperiods\fP, \fInewrank\fP, \fIierror\fP)
	TYPE(MPI_Comm), INTENT(IN) :: \fIcomm\fP
	INTEGER, INTENT(IN) :: \fIndims\fP, \fIdims(ndims)\fP
	LOGICAL, INTENT(IN) :: \fIperiods(ndims)\fP
	INTEGER, INTENT(OUT) :: \fInewrank\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
int Cartcomm::Map(int \fIndims\fP, const int \fIdims\fP[],
	const bool \fIperiods\fP[]) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
comm
Input communicator (handle).
.TP 1i
ndims
Number of dimensions of Cartesian structure (integer).
.TP 1i
dims
Integer array of size ndims specifying the number of processes in each
coordinate direction.
.TP 1i
periods
Logical array of size ndims specifying the periodicity specification in each coordinate direction.

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newrank
Reordered rank of the calling process; MPI_UNDEFINED if calling process does not belong to grid (integer).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_Cart_map and MPI_Graph_map can be used to implement all other topology functions. In general they will not be called by the user directly, unless he or she is creating additional virtual topology capability other than that provided by MPI.
.sp
MPI_Cart_map computes an "optimal" placement for the calling process on the physical machine. A possible implementation of this function is to always return the rank of the calling process, that is, not to perform any reordering.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Graph_map
