.\" -*- nroff -*-
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines
.\" $COPYRIGHT$
.TH MPI_Type_create_hvector 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_create_hvector\fP \- Creates a vector (strided) data type with offset in bytes.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_create_hvector(int \fIcount\fP, int \fIblocklength\fP,
	MPI_Aint \fIstride\fP, MPI_Datatype \fIoldtype\fP, MPI_Datatype *\fInewtype\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_TYPE_CREATE_HVECTOR(\fICOUNT, BLOCKLENGTH, STRIDE, OLDTYPE,
	NEWTYPE, IERROR\fP)

	INTEGER	\fICOUNT, BLOCKLENGTH, OLDTYPE, NEWTYPE, IERROR\fP
	INTEGER(KIND=MPI_ADDRESS_KIND) \fISTRIDE\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Type_create_hvector(\fIcount\fP, \fIblocklength\fP, \fIstride\fP, \fIoldtype\fP, \fInewtype\fP,
		\fIierror\fP)
	INTEGER, INTENT(IN) :: \fIcount\fP, \fIblocklength\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: \fIstride\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIoldtype\fP
	TYPE(MPI_Datatype), INTENT(OUT) :: \fInewtype\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
MPI::Datatype MPI::Datatype::Create_hvector(int \fIcount\fP,
	int \fIblocklength\fP, MPI::Aint \fIstride\fP) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of blocks (nonnegative integer).
.TP 1i
blocklength
Number of elements in each block (nonnegative integer).
.TP 1i
stride
Number of bytes between start of each block (integer).
.TP 1i
oldtype
Old data type (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New data type (handle).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
MPI_Type_create_hvector creates a vector (strided) data type with offset in bytes.
.PP
NOTE \- This routine replaces MPI_Type_hvector, which is deprecated. See the man page MPI_Type_hvector(3) for information about that routine.

.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fISTRIDE\fP argument only for Fortran 90.  FORTRAN 77
users may use the non-portable syntax
.sp
.nf
     INTEGER*MPI_ADDRESS_KIND \fISTRIDE\fP
.fi
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h
and gives the length of the declared integer in bytes.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
MPI_Type_hvector
.br
MPI_Type_vector
.br
