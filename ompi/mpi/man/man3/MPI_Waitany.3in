.\" -*- nroff -*-
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Waitany 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Waitany\fP \- Waits for any specified send or receive to complete.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Waitany(int \fIcount\fP, MPI_Request\fI array_of_requests[]\fP,
	int \fI*index\fP, MPI_Status\fI *status\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_WAITANY(\fICOUNT, ARRAY_OF_REQUESTS, INDEX, STATUS, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_REQUESTS(*), INDEX\fP
	INTEGER	\fISTATUS(MPI_STATUS_SIZE), IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Waitany(\fIcount\fP, \fIarray_of_requests\fP, \fIindex\fP, \fIstatus\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIcount\fP
	TYPE(MPI_Request), INTENT(INOUT) :: \fIarray_of_requests(count)\fP
	INTEGER, INTENT(OUT) :: \fIindex\fP
	TYPE(MPI_Status) :: \fIstatus\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
static int Request::Waitany(int \fIcount\fP, Request
	\fIarray_of_requests\fP[], Status& \fIstatus\fP)

static int Request::Waitany(int \fIcount\fP, Request \fIarray_of_requests\fP[])

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
List length (integer).
.TP 1i
array_of_requests
Array of requests (array of handles).
.sp

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
index
Index of handle for operation that completed (integer). In the range 0 to
count-1.  In Fortran, the range is 1 to count.
.TP 1i
status
Status object (status).
.sp
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
A call to MPI_Waitany can be used to wait for the completion of one out of several requests.
.sp
The array_of_requests list may contain null or inactive handles. If the list contains no active handles (list has length zero or all entries are null or inactive), then the call returns immediately with index = MPI_UNDEFINED, and an empty status.
.sp
The execution of MPI_Waitany(count, array_of_requests, index, status) has the same effect as the execution of MPI_Wait(&array_of_requests[i], status), where i is the value returned by index (unless the value of index is MPI_UNDEFINED). MPI_Waitany with an array containing one active entry is equivalent to MPI_Wait.
.sp
If your application does not need to examine the \fIstatus\fP field, you can save resources by using the predefined constant MPI_STATUS_IGNORE as a special value for the \fIstatus\fP argument.
.sp
\fBExample:\fR Client-server code (starvation can occur).
.sp
.nf
    CALL MPI_COMM_SIZE(comm, size, ierr)
    CALL MPI_COMM_RANK(comm, rank, ierr)
    IF(rank .GT 0) THEN         ! client code
        DO WHILE(.TRUE.)
           CALL MPI_ISEND(a, n, MPI_REAL, 0, tag, comm, request, ierr)
           CALL MPI_WAIT(request, status, ierr)
        END DO
    ELSE         ! rank=0 -- server code
           DO i=1, size-1
              CALL MPI_IRECV(a(1,i), n, MPI_REAL, i tag,
                       comm, request_list(i), ierr)
           END DO
           DO WHILE(.TRUE.)
              CALL MPI_WAITANY(size-1, request_list, index, status, ierr)
              CALL DO_SERVICE(a(1,index))  ! handle one message
              CALL MPI_IRECV(a(1, index), n, MPI_REAL, index, tag,
                        comm, request_list(index), ierr)
           END DO
    END IF
.fi
.sp

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler, MPI_File_set_errhandler, or
MPI_Win_set_errhandler (depending on the type of MPI handle that
generated the request); the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does
not guarantee that an MPI program can continue past an error.
.sp
Note that per MPI-1 section 3.2.5, MPI exceptions on requests passed
to MPI_WAITANY do not set the status.MPI_ERROR field in the returned
status.  The error code is passed to the back-end error handler and
may be passed back to the caller through the return value of
MPI_WAITANY if the back-end error handler returns it.  The pre-defined
MPI error handler MPI_ERRORS_RETURN exhibits this behavior, for
example.

.SH SEE ALSO
.ft R
.sp
MPI_Comm_set_errhandler
.br
MPI_File_set_errhandler
.br
MPI_Test
.br
MPI_Testall
.br
MPI_Testany
.br
MPI_Testsome
.br
MPI_Wait
.br
MPI_Waitall
.br
MPI_Waitsome
.br
MPI_Win_set_errhandler
.br

