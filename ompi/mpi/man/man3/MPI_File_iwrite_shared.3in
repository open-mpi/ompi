.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" Copyright 2015-2016 Research Organization for Information Science
.\"                     and Technology (RIST). All rights reserved.
.\" $COPYRIGHT$
.TH MPI_File_iwrite_shared 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_File_iwrite_shared\fP \- Writes a file using the shared file pointer (nonblocking, noncollective).



.SH SYNTAX
.ft R
.nf
.SH C Syntax
.nf
#include <mpi.h>
int MPI_File_iwrite_shared(MPI_File \fIfh\fP, const void \fI*buf\fP, int \fIcount\fP, MPI_Datatype
	\fIdatatype\fP, MPI_Request \fI*request\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_FILE_IWRITE_SHARED(\fIFH\fP, \fIBUF\fP, \fICOUNT\fP, \fIDATATYPE\fP, \fIREQUEST\fP, \fIIERROR\fP)
	<type>	\fIBUF(*)\fP
	INTEGER	\fIFH, COUNT, DATATYPE, REQUEST, IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_File_iwrite_shared(\fIfh\fP, \fIbuf\fP, \fIcount\fP, \fIdatatype\fP, \fIrequest\fP, \fIierror\fP)
	TYPE(MPI_File), INTENT(IN) :: \fIfh\fP
	TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: \fIbuf\fP
	INTEGER, INTENT(IN) :: \fIcount\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIdatatype\fP
	TYPE(MPI_Request), INTENT(OUT) :: \fIrequest\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
MPI::Request MPI::File::Iwrite_shared(const void* \fIbuf\fP, int \fIcount\fP,
	const MPI::Datatype& \fIdatatype\fP)

.fi
.SH INPUT/OUTPUT PARAMETER
.ft R
.TP 1i
fh
File handle (handle).

.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of elements in buffer (integer).
.ft R
.TP 1i
datatype
Data type of each buffer element (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
buf
Initial address of buffer (choice).
.TP 1i
request
Request object (handle).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_File_iwrite_shared is a nonblocking routine that uses the shared file pointer to write files. The order of serialization is not deterministic for this noncollective routine, so you need to use other methods of synchronization to impose a particular order.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to MPI_ERRORS_RETURN. The error handler may be changed with MPI_File_set_errhandler; the predefined error handler MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI does not guarantee that an MPI program can continue past an error.

