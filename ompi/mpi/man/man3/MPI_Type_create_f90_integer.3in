.\" -*- nroff -*-
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines
.\" $COPYRIGHT$
.TH MPI_Type_create_f90_integer 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"

.SH NAME
.nf
\fBMPI_Type_create_f90_integer\fP \- Returns a bounded MPI integer datatype

.fi
.SH SYNTAX
.ft R

.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_create_f90_integer(int \fIr\fP, MPI_Datatype *\fInewtype\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_TYPE_CREATE_F90_INTEGER (\fIR, NEWTYPE, IERROR\fP)
	INTEGER	\fIR, NEWTYPE, IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Type_create_f90_integer(\fIr\fP, \fInewtype\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIr\fP
	TYPE(MPI_Datatype), INTENT(OUT) :: \fInewtype\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
static MPI::Datatype MPI::Datatype::Create_f90_integer(int \fIr\fP)

.fi
.SH INPUT PARAMETER
.ft R
.TP 1i
r
Precision, in decimal digits (integer).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New data type (handle).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
This function provides a way to declare KIND-parameterized INTEGER MPI
datatypes. The argument is interpreted in a similar fashion to the F90
function SELECTED_INT_KIND: \fIr\fP must be a scalar integer, and
represents the desired level of numerical precision, in decimal
digits.

.SH NOTES
.ft R
It is erroneous to supply a value for \fIr\fP not supported by the
compiler.
.sp
The Fortran function SELECTED_INT_KIND maps a large number of \fIr\fP
values to a much smaller number of KIND parameters supported by the
compiler. KIND parameters are not specified by the language and are
not portable. From the point of view of the language, variables of the
same base type and KIND parameter are equivalent, even if their KIND
parameters were generated by different \fIr\fP arguments to
SELECTED_INT_KIND. However, to help facilitate interoperability in a
heterogeneous environment, equivalency is more strictly defined for
datatypes returned by MPI_Type_create_f90_integer. Two MPI datatypes,
each generated by this function, will match if and only if they have
identical values for \fIr\fP.
.sp
The interaction between the datatypes returned by this function and
the external32 data representation \- used by MPI_Pack_external,
MPI_Unpack_external and many MPI_File functions \- is subtle. The
external32 representation of returned datatypes is as follows.
.sp
.nf
	if (\fIr\fP > 38):
		external32 size = n/a (undefined)
	else if (\fIr\fP > 18):
		external32 size = 16
	else if (\fIr\fP > 9):
		external32 size = 8
	else if (\fIr\fP > 4):
		external32 size = 4
	else if (\fIr\fP > 2):
		external32 size = 2
	else:
		external32 size = 1
.fi
.sp
If the external32 representation of a datatype is undefined, so are
the results of using that datatype in operations that require the
external32 format. Care should be taken not to use incompatible
datatypes indirectly, e.g., as part of another datatype or through a
duplicated datatype, in these functions.
.sp
If a variable is declared specifying a nondefault KIND value that was
not obtained with SELECTED_INT_KIND (i.e., \fIr\fP is unknown), the
only way to obtain a matching MPI datatype is to use the functions
MPI_Sizeof and MPI_Type_match_size.

.SH ERRORS
.ft R
Almost all MPI routines return an error value; C routines as
the value of the function and Fortran routines in the last argument. C++
functions do not return errors. If the default error handler is set to
MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
See the MPI man page for a full list of MPI error codes.

.SH SEE ALSO
.ft R
.nf
MPI_Pack_external
MPI_Sizeof
MPI_Type_match_size
MPI_Unpack_external
SELECTED_INT_KIND

