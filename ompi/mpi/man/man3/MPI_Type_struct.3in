.\" -*- nroff -*-
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Type_struct 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_struct\fP \- Creates a \fIstruct\fP data type -- use of this routine is deprecated.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_struct(int \fIcount\fP, int\fI *array_of_blocklengths\fP,
	MPI_Aint\fI *array_of_displacements\fP, MPI_Datatype\fI *array_of_types\fP,
	MPI_Datatype\fI *newtype\fP)

.fi
.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'
MPI_TYPE_STRUCT(\fICOUNT, ARRAY_OF_BLOCKLENGTHS,
		ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES,
		NEWTYPE, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_BLOCKLENGTHS(*)\fP
	INTEGER	\fIARRAY_OF_DISPLACEMENTS(*)\fP
	INTEGER	\fIARRAY_OF_TYPES(*), NEWTYPE, IERROR\fP


.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of blocks (integer)  also number of entries in arrays
array_of_types,  array_of_displacements, and array_of_blocklengths.
.TP 1i
array_of_blocklengths
Number of elements in each block (array).
.TP 1i
array_of_displacements
Byte displacement of each block (array).
.TP 1i
array_of_types
Type of elements in each block (array of handles to datatype objects).
.sp

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New datatype (handle).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
Note that use of this routine is \fIdeprecated\fP as of MPI-2. Use MPI_Type_create_struct instead.
.sp
This deprecated routine is not available in C++.
.sp
MPI_Type_struct is the most general type constructor. It further generalizes MPI_Type_hindexed in that it allows each block to consist of replications of different datatypes.
.sp
\fBExample:\fP Let type1 have type map
.nf

    {(double, 0), (char, 8)}

.fi
with extent 16. Let B = (2, 1, 3), D = (0, 16, 26), and T = (MPI_FLOAT, type1, MPI_CHAR). Then a call to MPI_Type_struct(3, B, D, T, newtype) returns a datatype with type map
.nf

    {(float, 0), (float,4), (double, 16), (char, 24),
    (char, 26), (char, 27), (char, 28)}

.fi
That is, two copies of MPI_FLOAT starting at 0, followed by one copy of type1 starting at 16, followed by three copies of MPI_CHAR, starting at 26. (We assume that a float occupies 4 bytes.)
.sp
For more information, see section 3.12.1 of the MPI-1.1 Standard.

.SH NOTES
If an upperbound is set explicitly by using the MPI datatype MPI_UB, the corresponding index must be positive.
.sp
The MPI-1 Standard originally made vague statements about padding and alignment; this was intended to allow the simple definition of structures that could be sent with a count greater than one. For example,
.nf
    struct {int a; char b;} foo;
.fi
may have
.nf
    sizeof(foo) = sizeof(int) + sizeof(char);
.fi
defining the extent of a datatype as including an epsilon, which would have allowed an implementation to make the extent an MPI datatype for this structure equal to 2*sizeof(int). However, since different systems might define different paddings, a clarification to the standard made epsilon zero. Thus, if you define a structure datatype and wish to send or receive multiple items, you should explicitly include an MPI_UB entry as the last member of the structure.  For example, the following code can be used for the structure foo:
.nf

    blen[0] = 1; indices[0] = 0; oldtypes[0] = MPI_INT;
    blen[1] = 1; indices[1] = &foo.b - &foo; oldtypes[1] = MPI_CHAR;
    blen[2] = 1; indices[2] = sizeof(foo); oldtypes[2] = MPI_UB;
    MPI_Type_struct( 3, blen, indices, oldtypes, &newtype );

.fi

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Type_create_struct
.br
MPI_Type_create_hindexed
.br

