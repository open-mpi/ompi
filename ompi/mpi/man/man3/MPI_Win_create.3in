.\" -*- nroff -*-
.\" Copyright 2015      Los Alamos National Security, LLC. All rights
.\" reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2007-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Win_create 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Win_create\fP \- One-sided MPI call that returns a window object for RMA operations.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
MPI_Win_create(void *\fIbase\fP, MPI_Aint \fIsize\fP, int \fIdisp_unit\fP,
	MPI_Info \fIinfo\fP, MPI_Comm \fIcomm\fP, MPI_Win *\fIwin\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_WIN_CREATE(\fIBASE, SIZE, DISP_UNIT, INFO, COMM, WIN, IERROR\fP)
	<type> \fIBASE\fP(*)
	INTEGER(KIND=MPI_ADDRESS_KIND) \fISIZE\fP
	INTEGER \fIDISP_UNIT, INFO, COMM, WIN, IERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Win_create(\fIbase\fP, \fIsize\fP, \fIdisp_unit\fP, \fIinfo\fP, \fIcomm\fP, \fIwin\fP, \fIierror\fP)
	TYPE(*), DIMENSION(..), ASYNCHRONOUS :: \fIbase\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: \fIsize\fP
	INTEGER, INTENT(IN) :: \fIdisp_unit\fP
	TYPE(MPI_Info), INTENT(IN) :: \fIinfo\fP
	TYPE(MPI_Comm), INTENT(IN) :: \fIcomm\fP
	TYPE(MPI_Win), INTENT(OUT) :: \fIwin\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
static MPI::Win MPI::Win::Create(const void* \fIbase\fP,
	MPI::Aint \fIsize\fP, int \fIdisp_unit\fP, const
	MPI::Info& \fIinfo\fP, const MPI::Intracomm& \fIcomm\fP)

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
base
Initial address of window (choice).
.TP 1i
size
Size of window in bytes (nonnegative integer).
.TP 1i
disp_unit
Local unit size for displacements, in bytes (positive integer).
.TP 1i
info
Info argument (handle).
.TP 1i
comm
Communicator (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
win
Window object returned by the call (handle).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_Win_create is a one-sided MPI communication collective call executed by all processes in the group of \fIcomm\fP. It returns a window object that can be used by these processes to perform RMA operations. Each process specifies a window of existing memory that it exposes to RMA accesses by the processes in the group of \fIcomm\fP. The window consists of \fIsize\fP bytes, starting at address \fIbase\fP. A process may elect to expose no memory by specifying \fIsize\fP = 0.
.sp
If the \fIbase\fP value used by MPI_Win_create was allocated by MPI_Alloc_mem, the size of the window can be no larger than the value set by the MPI_ALLOC_MEM function.
.sp
The displacement unit argument is provided to facilitate address arithmetic in RMA operations: the target displacement argument of an RMA operation is scaled by the factor \fIdisp_unit\fP specified by the target process, at window creation.
.sp
The following info keys are supported:
.ft R
.TP 1i
no_locks
If set to \fItrue\fP, then the implementation may assume that the local
window is never locked (by a call to MPI_Win_lock or
MPI_Win_lock_all).  Setting this value if only active synchronization
may allow the implementation to enable certain optimizations.
.sp
.TP 1i
accumulate_ordering
By default, accumulate operations from one initiator to one target on
the same window are strictly ordered.  If the info key
accumulate_ordering is set to \fInone\fP, no ordering of accumulate
operations guaranteed.  They key can also be a comma-separated list of
required orderings consisting of \fIrar\fP, \fIwar\fP, \fIraw\fP, and \fIwaw\fP for
read-after-read, write-after-read, read-after-write, and
write-after-write, respectively.  Looser ordering constraints are
likely to result in improved performance.
.sp
.TP 1i
accumulate_ops
If set to \fIsame_op\fP, the implementation will assume that all concurrent
accumulate calls to the same target address will use the same
operation.  If set to \fIsame_op_no_op\fP, then the implementation will
assume that all concurrent accumulate calls to the same target address
will use the same operation or MPI_NO_OP.  The default is \fIsame_op_no_op\fP.
.sp
.TP 1i
same_size
If set to \fItrue\fP, then the implementation may assume that the argument
\fIsize\fP is identical on all processes, and that all processes have
provided this info key with the same value.
.sp
.TP 1i
same_disp_unit
If set to \fItrue\fP, then the implementation may assume that the argument
\fIdisp_unit\fP is identical on all processes, and that all processes have
provided this info key with the same value.
.sp
.SH NOTES
Common choices for \fIdisp_unit\fP are 1 (no scaling), and (in C syntax) \fIsizeof(type)\fP, for a window that consists of an array of elements of type \fItype\fP. The later choice will allow one to use array indices in RMA calls, and have those scaled correctly to byte displacements, even in a heterogeneous environment.
.sp
Use memory allocated by MPI_Alloc_mem to guarantee properly aligned window boundaries (such as word, double-word, cache line, page frame, and so on).
.sp



.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fISIZE\fP argument only for Fortran 90. FORTRAN 77
users may use the non-portable syntax
.sp
.nf
     INTEGER*MPI_ADDRESS_KIND \fISIZE\fP
.fi
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h
and gives the length of the declared integer in bytes.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Alloc_mem
MPI_Free_mem
MPI_Win_allocate
MPI_Win_allocate_shared
