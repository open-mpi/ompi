.\" -*- nroff -*-
.\" Copyright 2010-2014 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Type_hindexed 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_hindexed\fP \- Creates an indexed datatype with offsets in bytes -- use of this routine is deprecated.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_hindexed(int \fIcount\fP, int\fI *array_of_blocklengths\fP,
	MPI_Aint\fI *array_of_displacements\fP, MPI_Datatype\fI oldtype\fP,
	MPI_Datatype\fI *newtype\fP)

.fi
.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'
MPI_TYPE_HINDEXED(\fICOUNT, ARRAY_OF_BLOCKLENGTHS,
		ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_BLOCKLENGTHS(*)\fP
	INTEGER	\fIARRAY_OF_DISPLACEMENTS(*), OLDTYPE, NEWTYPE\fP
	INTEGER	\fIIERROR\fP


.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of blocks -- also number of entries in array_of_displacements  and
array_of_blocklengths  (integer).
.TP 1i
array_of_blocklengths
Number of elements in each block (array of nonnegative integers).
.TP 1i
array_of_displacements
Byte displacement of each block (C: array of
.IR MPI_Aint ,
Fortran: array of integer).
.TP 1i
oldtype
Old datatype (handle).
.sp
.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New datatype (handle).
.sp
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
Note that use of this routine is \fIdeprecated\fP as of MPI-2. Use MPI_Type_create_hindexed instead.
.sp
This deprecated routine is not available in C++.
.sp
The function is identical to MPI_Type_indexed, except that block displacements in array_of_displacements are specified in bytes, rather than in multiples of the oldtype extent.
.sp
Assume that oldtype has type map
.sp
.nf
    {(type(0), disp(0)), ..., (type(n-1), disp(n-1))},
.fi
.sp
with extent ex. Let B be the array_of_blocklength argument and D be the
array_of_displacements argument. The newly created datatype has
.nf
n x S^count-1
    (i=0)        B[i]  entries:

  {(type(0), disp(0) + D[0]),...,(type(n-1), disp(n-1) + D[0]),...,
  (type(0), disp(0) + (D[0] + B[0]-1)* ex),...,
  type(n-1), disp(n-1) + (D[0]+ B[0]-1)* ex),...,
  (type(0), disp(0) + D[count-1]),...,(type(n-1), disp(n-1) + D[count-1]),...,
  (type(0), disp(0) +  D[count-1] + (B[count-1] -1)* ex),...,
  (type(n-1), disp(n-1) + D[count-1] + (B[count-1] -1)* ex)}
.fi

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
MPI_Type_create_hindexed
.br
MPI_Type_indexed
.br

