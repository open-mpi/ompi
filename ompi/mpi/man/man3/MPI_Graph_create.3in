.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Graph_create 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Graph_create \fP \- Makes a new communicator to which topology information has been attached.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Graph_create(MPI_Comm \fIcomm_old\fP, int\fI nnodes\fP, const int\fI index[]\fP,
	const int\fI edges[]\fP, int\fI reorder\fP, MPI_Comm\fI *comm_graph\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_GRAPH_CREATE(\fICOMM_OLD, NNODES, INDEX, EDGES, REORDER,
		COMM_GRAPH, IERROR\fP)
	INTEGER	\fICOMM_OLD, NNODES, INDEX(*), EDGES(*)\fP
	INTEGER	\fICOMM_GRAPH, IERROR\fP
	LOGICAL   \fIREORDER\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Graph_create(\fIcomm_old\fP, \fInnodes\fP, \fIindex\fP, \fIedges\fP, \fIreorder\fP, \fIcomm_graph\fP,
		\fIierror\fP)
	TYPE(MPI_Comm), INTENT(IN) :: \fIcomm_old\fP
	INTEGER, INTENT(IN) :: \fInnodes\fP, \fIindex(nnodes)\fP, \fIedges(*)\fP
	LOGICAL, INTENT(IN) :: \fIreorder\fP
	TYPE(MPI_Comm), INTENT(OUT) :: \fIcomm_graph\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
Graphcomm Intracomm::Create_graph(int \fInnodes\fP, const int \fIindex\fP[],
	const int \fIedges\fP[], bool \fIreorder\fP) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
comm_old
Input communicator without topology (handle).
.TP 1i
nnodes
Number of nodes in graph (integer).
.TP 1i
index
Array of integers describing node degrees (see below).
.TP 1i
edges
Array of integers describing graph edges (see below).
.TP 1i
reorder
Ranking may be reordered (true) or not (false) (logical).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
comm_graph
Communicator with graph topology added (handle).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_Graph_create returns a handle to a new communicator to which the graph topology information is attached. If reorder = false then the rank of each process in the new group is identical to its rank in the old group. Otherwise, the function may reorder the processes. If the size, nnodes, of the graph is smaller than the size of the group of comm_old, then some processes are returned MPI_COMM_NULL, in analogy to MPI_Cart_create and MPI_Comm_split. The call is erroneous if it specifies a graph that is larger than the group size of the input communicator.
.sp
The three parameters nnodes, index, and edges define the graph structure. nnodes is the number of nodes of the graph. The nodes are numbered from 0 to nnodes-1. The ith entry of array index stores the total number of neighbors of the first i graph nodes. The lists of neighbors of nodes 0,\ 1,\ ..., nnodes-1 are stored in consecutive locations in array edges. The array edges is a flattened representation of the edge lists. The total number of entries in index is nnodes and the total number of entries in edges is equal to the number of graph edges.
.sp
The definitions of the arguments nnodes, index, and edges are illustrated with the following simple example.
.sp
\fBExample:\fP Assume there are four processes 0, 1, 2, 3 with the
following adjacency matrix:
.sp
.nf
    Process	Neighbors
       0		   1, 3
       1		   0
       2		   3
       3		   0, 2
.fi
.sp
Then, the input arguments are:
.nf
    nnodes = 4
    index  = 2, 3, 4, 6
    edges  = 1, 3, 0, 3, 0, 2
.fi
.sp
Thus, in C, index[0] is the degree of node zero, and index[i] - index[i-1]
is the degree of node i, i=1, . . . , nnodes-1;  the list of neighbors of
node zero is stored in edges[j], for 0 <= j <= index[0] - 1 and the list of
neighbors of node i, i > 0 ,  is stored in edges[j], index[i-1] <= j <= index[i] - 1.
.sp
In Fortran, index(1) is the degree of node zero, and index(i+1) - index(i)
is the degree of node i, i=1, . . . , nnodes-1;  the list of neighbors of
node zero is stored in edges(j), for 1 <= j <= index(1) and the list of
neighbors of node  i, i > 0, is stored in edges(j), index(i) + 1 <= j <= index(i + 1).

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Graph_get
.br
MPI_Graphdims_get

