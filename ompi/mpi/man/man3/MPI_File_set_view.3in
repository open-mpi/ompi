.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" Copyright 2015-2016 Research Organization for Information Science
.\"                     and Technology (RIST). All rights reserved.
.\" $COPYRIGHT$
.TH MPI_File_set_view 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_File_set_view\fP \- Changes process's view of data in file (collective).
.SH SYNTAX
.ft R
.nf
.SH C Syntax
.nf
#include <mpi.h>
int MPI_File_set_view(MPI_File \fIfh\fP, MPI_Offset \fIdisp\fP,
	MPI_Datatype \fIetype\fP, MPI_Datatype \fIfiletype\fP,
	const char \fI*datarep\fP, MPI_Info \fIinfo\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_FILE_SET_VIEW(\fIFH\fP, \fIDISP\fP, \fIETYPE\fP,
	\fIFILETYPE\fP, \fIDATAREP\fP, \fIINFO\fP, \fIIERROR\fP)
	INTEGER	\fIFH, ETYPE, FILETYPE, INFO, IERROR\fP
	CHARACTER*(*)	\fIDATAREP\fP
	INTEGER(KIND=MPI_OFFSET_KIND)	\fIDISP\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_File_set_view(\fIfh\fP, \fIdisp\fP, \fIetype\fP, \fIfiletype\fP, \fIdatarep\fP, \fIinfo\fP, \fIierror\fP)
	TYPE(MPI_File), INTENT(IN) :: \fIfh\fP
	INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: \fIdisp\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIetype\fP, \fIfiletype\fP
	CHARACTER(LEN=*), INTENT(IN) :: \fIdatarep\fP
	TYPE(MPI_Info), INTENT(IN) :: \fIinfo\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void MPI::File::Set_view(MPI::Offset \fIdisp\fP,
	const MPI::Datatype& \fIetype\fP,
	const MPI::Datatype& \fIfiletype\fP, const char* \fIdatarep\fP,
	const MPI::Info& \fIinfo\fP)

.fi
.SH INPUT/OUTPUT PARAMETER
.ft R
.TP 1i
fh
File handle (handle).

.SH INPUT PARAMETERS
.ft R
.TP 1i
disp
Displacement (integer).
.TP 1i
etype
Elementary data type (handle).
.TP 1i
filetype
File type (handle). See Restrictions, below.
.TP 1i
datarep
Data representation (string).
.TP 1i
info
Info object (handle).

.SH OUTPUT PARAMETER
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
The MPI_File_set_view routine changes the process's view of the data
in the file -- the beginning of the data accessible in the file through
that view is set to
.I disp;
the type of data is set to
.I etype;
and the distribution of data to processes is set to
.I filetype.
In addition, MPI_File_set_view resets the independent file pointers and
the shared file pointer to zero. MPI_File_set_view is collective across the
.IR fh ;
all processes in the group must pass identical values for
.IR datarep
and provide an
.I etype
with an identical extent.  The values for
.IR disp ,
.IR filetype ,
and
.I info
may vary. It is erroneous to use the shared file pointer data-access
routines unless identical values for
.I disp
and
.I filetype
are also given. The data types passed in
.I etype
and
.I filetype
must be committed.
.sp
The
.I disp
displacement argument specifies the position (absolute offset in
bytes from the beginning of the file) where the view begins.
.sp
The MPI_File_set_view interface allows the user to pass a data-representation string to MPI I/O via the \fIdatarep\fP argument. To obtain the default value (or "native"), pass NULL. The user can also pass information via the \fIinfo\fP argument. See the HINTS section for a list of hints that can be set. For more information, see the MPI-2 standard.

.SH HINTS
.ft R
The following hints can be used as values for the \fIinfo\fP argument.
.sp
SETTABLE HINTS:
.sp
- MPI_INFO_NULL
.sp
- shared_file_timeout: Amount of time (in seconds) to wait for access to the
shared file pointer before exiting with MPI_ERR_TIMEDOUT.
.sp
- rwlock_timeout: Amount of time (in seconds) to wait for obtaining a read or
write lock on a contiguous chunk of a UNIX file before exiting with MPI_ERR_TIMEDOUT.
.sp
- noncoll_read_bufsize:  Maximum size of the buffer used by
MPI I/O to satisfy read requests in
the noncollective data-access routines. (See NOTE, below.)
.sp
- noncoll_write_bufsize: Maximum size of the buffer used by
MPI I/O to satisfy write requests in
the noncollective data-access routines. (See NOTE, below.)
.sp
- coll_read_bufsize:  Maximum size of the buffer used by MPI
I/O to satisfy read requests in the
collective data-access routines. (See NOTE, below.)
.sp
- coll_write_bufsize:  Maximum size of the buffer used by MPI
I/O to satisfy write requests in the
collective data-access routines. (See NOTE, below.)
.sp
NOTE: A buffer size smaller than the distance (in bytes) in a UNIX file between the first byte and the last byte of the access request causes MPI I/O to iterate and perform multiple UNIX read() or write() calls. If the request includes multiple noncontiguous chunks of data, and the buffer size is greater than the size of those chunks, then the UNIX read() or write() (made at the MPI I/O level) will access data not requested by this process in order to reduce the total number of write() calls made. If this is not desirable behavior, you should reduce this buffer size to equal the size of the contiguous chunks within the aggregate request.
.sp
- mpiio_concurrency: (boolean) controls whether nonblocking
I/O routines can bind an extra thread to an LWP.
.sp
- mpiio_coll_contiguous: (boolean) controls whether subsequent collective data accesses will request collectively contiguous regions of the file.
.sp
NON-SETTABLE HINTS:
.sp
- filename: Access this hint to get the name of the file.

.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fIDISP\fP argument only for Fortran 90.  FORTRAN 77
users may use the non-portable syntax
.sp
.nf
     INTEGER*MPI_OFFSET_KIND \fIDISP\fP
.fi
.sp
where MPI_OFFSET_KIND is a constant defined in mpif.h
and gives the length of the declared integer in bytes.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to MPI_ERRORS_RETURN. The error handler may be changed with MPI_File_set_errhandler; the predefined error handler MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI does not guarantee that an MPI program can continue past an error.


