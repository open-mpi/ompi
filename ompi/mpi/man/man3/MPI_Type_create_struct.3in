.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines
.\" $COPYRIGHT$
.TH MPI_Type_create_struct 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_create_struct\fP \- Creates a structured data type.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_create_struct(int \fIcount\fP, int \fIarray_of_blocklengths\fP[],
	const MPI_Aint \fIarray_of_displacements\fP[], const MPI_Datatype \fIarray_of_types\fP[],
	MPI_Datatype *\fInewtype\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_TYPE_CREATE_STRUCT(\fICOUNT, ARRAY_OF_BLOCKLENGTHS,
		ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_BLOCKLENGTHS(*), ARRAY_OF_TYPES(*),\fP
	INTEGER \fINEWTYPE, IERROR \fP
	INTEGER(KIND=MPI_ADDRESS_KIND) \fIARRAY_OF_DISPLACEMENTS(*)\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Type_create_struct(\fIcount\fP, \fIarray_of_blocklengths\fP,
		\fIarray_of_displacements\fP, \fIarray_of_types\fP, \fInewtype\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIcount\fP, \fIarray_of_blocklengths(count)\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) ::
	\fIarray_of_displacements(count)\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIarray_of_types(count)\fP
	TYPE(MPI_Datatype), INTENT(OUT) :: \fInewtype\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
static MPI::Datatype MPI::Datatype::Create_struct(int \fIcount\fP,
	const int \fIarray_of_blocklengths\fP[], const MPI::Aint
	\fIarray_of_displacements\fP[], const MPI::Datatype
	\fIarray_of_types\fP[])

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of blocks (integer) -- also number of entries in arrays \fIarray_of_types\fP, \fIarray_of_displacements\fP, and \fIarray_of_blocklengths\fP.
.TP 1i
array_of_blocklengths
Number of elements in each block (array of integers).
.TP 1i
array_of_displacements
Byte displacement of each block (array of integers).
.TP 1i
array_of_types
Type of elements in each block (array of handles to data-type objects).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New data type (handle).
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
MPI_Type_create_struct creates a structured data type. This routine replaces MPI_Type_struct, which is now deprecated.
.PP
NOTE \- This routine replaces MPI_Type_struct, which is deprecated. See the man page MPI_Type_struct(3) for information about that routine.

.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fIARRAY_OF_DISPLACEMENTS\fP(*) argument only for Fortran 90.  FORTRAN 77
users may use the non-portable syntax
.sp
.nf
     INTEGER*MPI_ADDRESS_KIND \fIARRAY_OF_DISPLACEMENTS\fP(*)
.fi
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h
and gives the length of the declared integer in bytes.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Type_struct
.br
MPI_Type_create_hindexed

