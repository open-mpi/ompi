.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010-2014 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Type_indexed 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_indexed, MPI_Type_create_hindexed\fP \- Creates an indexed datatype.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_indexed(int \fIcount\fP, const int\fI array_of_blocklengths[]\fP,
	const int\fI array_of_displacements[]\fP, MPI_Datatype\fI oldtype\fP,
	MPI_Datatype\fI *newtype\fP)

int MPI_Type_create_hindexed(int \fIcount\fP,
	const int\fI array_of_blocklengths[]\fP,
	const MPI_Aint\fI array_of_displacements[]\fP, MPI_Datatype\fI oldtype\fP,
	MPI_Datatype\fI *newtype\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_TYPE_INDEXED(\fICOUNT, ARRAY_OF_BLOCKLENGTHS,
		ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_BLOCKLENGTHS(*)\fP
	INTEGER	\fIARRAY_OF_DISPLACEMENTS(*), OLDTYPE, NEWTYPE\fP
	INTEGER	\fIIERROR\fP

MPI_TYPE_CREATE_HINDEXED(\fICOUNT, ARRAY_OF_BLOCKLENGTHS,
		ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR\fP)
	INTEGER	\fICOUNT, ARRAY_OF_BLOCKLENGTHS(*)\fP
	INTEGER	\fIOLDTYPE, NEWTYPE\fP
	INTEGER(KIND=MPI_ADDRESS_KIND) \fIARRAY_OF_DISPLACEMENTS(*)\fP
	INTEGER	\fIIERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Type_indexed(\fIcount\fP, \fIarray_of_blocklengths\fP, \fIarray_of_displacements\fP,
		\fIoldtype\fP, \fInewtype\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIcount\fP, \fIarray_of_blocklengths(count),\fP
	\fIarray_of_displacements(count)\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIoldtype\fP
	TYPE(MPI_Datatype), INTENT(OUT) :: \fInewtype\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

MPI_Type_create_hindexed(\fIcount\fP, \fIarray_of_blocklengths\fP,
		\fIarray_of_displacements\fP, \fIoldtype\fP, \fInewtype\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIcount\fP, \fIarray_of_blocklengths(count)\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) ::
	\fIarray_of_displacements(count)\fP
	TYPE(MPI_Datatype), INTENT(IN) :: \fIoldtype\fP
	TYPE(MPI_Datatype), INTENT(OUT) :: \fInewtype\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
Datatype Datatype::Create_indexed(int \fIcount\fP,
	const int \fIarray_of_blocklengths\fP[],
	const int \fIarray_of_displacements\fP[]) const

Datatype Datatype::Create_hindexed(int \fIcount\fP,
	const int \fIarray_of_blocklengths\fP[],
	const MPI::Aint \fIarray_of_displacements\fP[]) const

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Number of blocks -- also number of entries in array_of_displacements and
array_of_blocklengths (nonnegative integer).
.TP 1i
array_of_blocklengths
Number of elements per block (array of nonnegative integers).
.TP 1i
array_of_displacements
Displacement for each block, in multiples of oldtype extent for MPI_Type_indexed and bytes for MPI_Type_create_hindexed (array of
integer for
.BR MPI_TYPE_INDEXED ,
array of
.I MPI_Aint
for
.BR MPI_TYPE_CREATE_HINDEXED ).
.TP 1i
oldtype
Old datatype (handle).
.sp
.SH OUTPUT PARAMETERS
.ft R
.TP 1i
newtype
New datatype (handle).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
The function MPI_Type_indexed allows replication of an old datatype into a sequence of blocks (each block is a concatenation of the old datatype), where each block can contain a different number of copies and have a different displacement. All block displacements are multiples of the old data type's extent.
.sp

\fBExample:\fP Let oldtype have type map {(double, 0), (char, 8)}, with extent 16. Let  B = (3, 1) and let D = (4, 0).  A call to MPI_Type_indexed(2, B, D, oldtype, newtype) returns a datatype with type map
.sp
.nf
    {(double, 64), (char, 72), (double, 80), (char, 88),
    (double, 96), (char, 104),
    (double, 0), (char, 8)}
.fi
.sp
That is, three copies of the old type starting at displacement 4 x 16 = 64, and one copy starting at displacement 0.
.sp
In general, assume that oldtype has type map
.sp
.nf
    {(type(0), disp(0)), ..., (type(n-1), disp(n-1))},
.fi
.sp
with extent ex. Let B be the array_of_blocklength argument and D be the
array_of_displacements argument. The newly created datatype has
.br
.nf
n x S ^count-1
    i = 0           B[i]  entries:

    {(type(0), disp(0) + D[0]* ex), ...,
    (type(n-1), disp(n-1) + D[0]* ex), ...,
    (type(0), disp(0) + (D[0] + B[0]-1)* ex), ...,
    (type(n-1), disp(n-1) + (D[0]+ B[0]-1)* ex), ...,
    (type(0), disp(0) + D[count-1]* ex), ...,
    (type(n-1), disp(n-1) + D[count-1]* ex), ...,
    (type(0), disp(0) +  (D[count-1] + B[count-1] -1)* ex), ...,
    (type(n-1), disp(n-1) + (D[count-1] + B[count-1] -1)* ex)}
.fi
.sp
A call to MPI_Type_vector(count, blocklength, stride, oldtype, newtype) is equivalent to a call to MPI_Type_indexed(count, B, D, oldtype, newtype) where
.sp
.nf
    D[j] = j * stride, j = 0,..., count-1

and

    B[j] = blocklength, j = 0, .., count-1
.fi

The function MPI_Type_create_hindexed is identical to MPI_Type_indexed, except that block displacements in \fIarray_of_displacements\fP are specified in bytes, rather than in multiples of the \fIoldtype\fP extent.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Type_hindexed
.br

