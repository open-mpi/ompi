.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright (c) 2010-2014 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Alltoallv 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"

.SH NAME
\fBMPI_Alltoallv, MPI_Ialltoallv\fP \- All processes send different amount of data to, and receive different amount of data from, all processes
.SH SYNTAX
.ft R

.SH C Syntax
.nf
#include <mpi.h>
int MPI_Alltoallv(const void *\fIsendbuf\fP, const int \fIsendcounts\fP[],
	const int \fIsdispls\fP[], MPI_Datatype \fIsendtype\fP,
	void *\fIrecvbuf\fP, const int\fI recvcounts\fP[],
	const int \fIrdispls\fP[], MPI_Datatype \fIrecvtype\fP, MPI_Comm \fIcomm\fP)

int MPI_Ialltoallv(const void *\fIsendbuf\fP, const int \fIsendcounts\fP[],
	const int \fIsdispls\fP[], MPI_Datatype \fIsendtype\fP,
	void *\fIrecvbuf\fP, const int\fI recvcounts\fP[],
	const int \fIrdispls\fP[], MPI_Datatype \fIrecvtype\fP, MPI_Comm \fIcomm\fP,
	MPI_Request \fI*request\fP)

.fi
.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'

MPI_ALLTOALLV(\fISENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE,
	RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, IERROR\fP)

	<type>	\fISENDBUF(*), RECVBUF(*)\fP
	INTEGER	\fISENDCOUNTS(*), SDISPLS(*), SENDTYPE\fP
	INTEGER	\fIRECVCOUNTS(*), RDISPLS(*), RECVTYPE\fP
	INTEGER	\fICOMM, IERROR\fP

MPI_IALLTOALLV(\fISENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE,
	RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, REQUEST, COMM, IERROR\fP)

	<type>	\fISENDBUF(*), RECVBUF(*)\fP
	INTEGER	\fISENDCOUNTS(*), SDISPLS(*), SENDTYPE\fP
	INTEGER	\fIRECVCOUNTS(*), RDISPLS(*), RECVTYPE\fP
	INTEGER	\fICOMM, REQUEST, IERROR\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void MPI::Comm::Alltoallv(const void* \fIsendbuf\fP,
	const int \fIsendcounts\fP[], const int \fIdispls\fP[],
	const MPI::Datatype& \fIsendtype\fP, void* \fIrecvbuf\fP,
	const int \fIrecvcounts\fP[], const int \fIrdispls\fP[],
	const MPI::Datatype& \fIrecvtype\fP)

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1.2i
sendbuf
Starting address of send buffer.
.TP 1.2i
sendcounts
Integer array, where entry i specifies the number of elements to send
to rank i.
.TP 1.2i
sdispls
Integer array, where entry i specifies the displacement (offset from
\fIsendbuf\fP, in units of \fIsendtype\fP) from which to send data to
rank i.
.TP 1.2i
sendtype
Datatype of send buffer elements.
.TP 1.2i
recvcounts
Integer array, where entry j specifies the number of elements to
receive from rank j.
.TP 1.2i
rdispls
Integer array, where entry j specifies the displacement (offset from
\fIrecvbuf\fP, in units of \fIrecvtype\fP) to which data from rank j
should be written.
.TP 1.2i
recvtype
Datatype of receive buffer elements.
.TP 1.2i
comm
Communicator over which data is to be exchanged.

.SH OUTPUT PARAMETERS
.ft R
.TP 1.2i
recvbuf
Address of receive buffer.
.TP 1.2i
request
Request (handle, non-blocking only).
.ft R
.TP 1.2i
IERROR
Fortran only: Error status.

.SH DESCRIPTION
.ft R
MPI_Alltoallv is a generalized collective operation in which all
processes send data to and receive data from all other processes. It
adds flexibility to MPI_Alltoall by allowing the user to specify data
to send and receive vector-style (via a displacement and element
count). The operation of this routine can be thought of as follows,
where each process performs 2n (n being the number of processes in
communicator \fIcomm\fP) independent point-to-point communications
(including communication with itself).
.sp
.nf
	MPI_Comm_size(\fIcomm\fP, &n);
	for (i = 0, i < n; i++)
	    MPI_Send(\fIsendbuf\fP + \fIsdispls\fP[i] * extent(\fIsendtype\fP),
	        \fIsendcounts\fP[i], \fIsendtype\fP, i, ..., \fIcomm\fP);
	for (i = 0, i < n; i++)
	    MPI_Recv(\fIrecvbuf\fP + \fIrdispls\fP[i] * extent(\fIrecvtype\fP),
	        \fIrecvcounts\fP[i], \fIrecvtype\fP, i, ..., \fIcomm\fP);
.fi
.sp
Process j sends the k-th block of its local \fIsendbuf\fP to process
k, which places the data in the j-th block of its local
\fIrecvbuf\fP.
.sp
When a pair of processes exchanges data, each may pass different
element count and datatype arguments so long as the sender specifies
the same amount of data to send (in bytes) as the receiver expects
to receive.
.sp
Note that process i may send a different amount of data to process j
than it receives from process j. Also, a process may send entirely
different amounts of data to different processes in the communicator.

.sp
WHEN COMMUNICATOR IS AN INTER-COMMUNICATOR
.sp
When the communicator is an inter-communicator, the gather operation occurs in two phases.  The data is gathered from all the members of the first group and received by all the members of the second group.  Then the data is gathered from all the members of the second group and received by all the members of the first.  The operation exhibits a symmetric, full-duplex behavior.
.sp
The first group defines the root process.  The root process uses MPI_ROOT as the value of \fIroot\fR.  All other processes in the first group use MPI_PROC_NULL as the value of \fIroot\fR.  All processes in the second group use the rank of the root process in the first group as the value of \fIroot\fR.
.sp
When the communicator is an intra-communicator, these groups are the same, and the operation occurs in a single phase.
.sp

.SH USE OF IN-PLACE OPTION
When the communicator is an intracommunicator, you can perform an all-to-all operation in-place (the output buffer is used as the input buffer).  Use the variable MPI_IN_PLACE as the value of \fIsendbuf\fR.  In this case, \fIsendcounts\fR, \fIsdispls\fP, and \fIsendtype\fR are ignored.  The input data of each process is assumed to be in the area where that process would receive its own contribution to the receive buffer.

.SH NOTES
.sp
The specification of counts and displacements should not cause
any location to be written more than once.
.sp
All arguments on all processes are significant. The \fIcomm\fP argument,
in particular, must describe the same communicator on all processes.
.sp
The offsets of \fIsdispls\fP and \fIrdispls\fP are measured in units
of \fIsendtype\fP and \fIrecvtype\fP, respectively. Compare this to
MPI_Alltoallw, where these offsets are measured in bytes.

.SH ERRORS
.ft R
Almost all MPI routines return an error value; C routines as
the value of the function and Fortran routines in the last argument. C++
functions do not return errors. If the default error handler is set to
MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.nf
MPI_Alltoall
MPI_Alltoallw

