.\" -*- nroff -*-
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Type_extent 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_extent\fP \- Returns the extent of a data type, the difference between the upper and lower bounds of the data type -- use of this routine is deprecated.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_extent(MPI_Datatype \fIdatatype\fP, MPI_Aint\fI *extent\fP)

.fi
.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'
MPI_TYPE_EXTENT(\fIDATATYPE, EXTENT, IERROR\fP)
	INTEGER	\fIDATATYPE, EXTENT, IERROR\fP


.fi
.SH INPUT PARAMETER
.ft R
.TP 1i
datatype
Datatype (handle).
.sp
.SH OUTPUT PARAMETERS
.ft R
.TP 1i
extent
Datatype extent (integer).
.sp
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
Note that use of this routine is \fIdeprecated\fP as of MPI-2. Please use MPI_Type_get_extent instead.
.sp
This deprecated routine is not available in C++.
.sp
MPI_Type_extent returns the extent of a data type, the difference between the upper and lower bounds of the data type.
.sp
In general, if
.sp
.nf
    Typemap = {(type(0), disp(0)), ..., (type(n-1), disp(n-1))}
.fi
.sp
then the lower bound of Typemap is defined to be
.sp
.nf
              ( min(j) disp(j)                         if no entry has
  lb(Typemap)=(                                        basic type lb
              (min(j) {disp(j) such that type(j) = lb} otherwise

.fi
.sp
Similarly, the upper bound of Typemap is defined to be
.sp
.nf
              (max(j) disp(j) + sizeof(type(j)) + e    if no entry has
  ub(Typemap)=(                                        basic type ub
              (max(j) {disp(j) such that type(j) = ub} otherwise
.fi
.sp
Then
.sp
.nf
    extent(Typemap) = ub(Typemap) - lb(Typemap)
.fi
.sp
If type(i) requires alignment to a byte address that is a multiple of k(i), then e is the least nonnegative increment needed to round extent(Typemap) to the next multiple of max(i) k(i).

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.

.SH SEE ALSO
.ft R
.sp
MPI_Type_get_extent
.br

