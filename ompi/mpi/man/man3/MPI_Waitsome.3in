.\" -*- nroff -*-
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" Copyright (c) 2011 Cisco Systems, Inc.  All rights reserved.
.\" $COPYRIGHT$
.TH MPI_Waitsome 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Waitsome\fP \- Waits for some given communications to complete.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Waitsome(int \fIincount\fP, MPI_Request \fIarray_of_requests[]\fP,
	int\fI *outcount\fP, int\fI array_of_indices[]\fP,
	MPI_Status \fIarray_of_statuses[]\fP)

.fi
.SH Fortran Syntax
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_WAITSOME(\fIINCOUNT, ARRAY_OF_REQUESTS, OUTCOUNT,
		ARRAY_OF_INDICES, ARRAY_OF_STATUSES, IERROR\fP)
	INTEGER	\fIINCOUNT, ARRAY_OF_REQUESTS(*), OUTCOUNT\fP
	INTEGER	\fIARRAY_OF_INDICES(*)\fP
	INTEGER	\fIARRAY_OF_STATUSES(MPI_STATUS_SIZE*)\fP
	INTEGER	\fIIERROR\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Waitsome(\fIincount\fP, \fIarray_of_requests\fP, \fIoutcount\fP, \fIarray_of_indices\fP,
		\fIarray_of_statuses\fP, \fIierror\fP)
	INTEGER, INTENT(IN) :: \fIincount\fP
	TYPE(MPI_Request), INTENT(INOUT) :: \fIarray_of_requests(incount)\fP
	INTEGER, INTENT(OUT) :: \fIoutcount\fP, \fIarray_of_indices(*)\fP
	TYPE(MPI_Status) :: \fIarray_of_statuses(*)\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
static int Request::Waitsome(int \fIincount\fP, Request
	\fIarray_of_requests\fP[], int \fIarray_of_indices\fP[], Status \fIarray_of_statuses\fP[])

static int Request::Waitsome(int \fIincount\fP, Request
	\fIarray_of_requests\fP[], int \fIarray_of_indices\fP[])

.fi
.SH INPUT PARAMETERS
.ft R
.TP 1i
incount
Length of array_of_requests (integer).
.TP 1i
array_of_requests
Array of requests (array of handles).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
outcount
Number of completed requests (integer).
.TP 1i
array_of_indices
Array of indices of operations that completed (array of integers).
.TP 1i
array_of_statuses
Array of status objects for operations that completed (array of status).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
Waits until at least one of the operations associated with active handles in the list have completed. Returns in outcount the number of requests from the list array_of_requests that have completed. Returns in the first outcount locations of the array array_of_indices the indices of these operations (index within the array array_of_requests; the array is indexed from 0 in C and from 1 in Fortran). Returns in the first outcount locations of the array array_of_status the status for these completed operations. If a request that completed was allocated by a nonblocking communication call, then it is deallocated, and the associated handle is set to MPI_REQUEST_NULL.
.sp
If the list contains no active handles, then the call returns immediately with outcount = MPI_UNDEFINED.
.sp
When one or more of the communications completed by MPI_Waitsome fails, then it is desirable to return specific information on each communication. The arguments outcount, array_of_indices, and array_of_statuses will be adjusted to indicate completion of all communications that have succeeded or failed. The call will return the error code MPI_ERR_IN_STATUS and the error field of each status returned will be set to indicate success or to indicate the specific error that occurred. The call will return MPI_SUCCESS if no request resulted in an error, and will return another error code if it failed for other reasons (such as invalid arguments). In such cases, it will not update the error fields of the statuses.
.sp
If your application does not need to examine the \fIarray_of_statuses\fP field, you can save resources by using the predefined constant MPI_STATUSES_IGNORE can be used as a special value for the \fIarray_of_statuses\fP argument.
.sp
\fBExample:\fR Same code as the example in the MPI_Waitany man page, but using MPI_Waitsome.
.sp
.nf
    CALL MPI_COMM_SIZE(comm, size, ierr)
    CALL MPI_COMM_RANK(comm, rank, ierr)
    IF(rank .GT. 0) THEN         ! client code
        DO WHILE(.TRUE.)
           CALL MPI_ISEND(a, n, MPI_REAL, 0, tag, comm, request, ierr)
           CALL MPI_WAIT(request, status, ierr)
        END DO
    ELSE         ! rank=0 -- server code
        DO i=1, size-1
           CALL MPI_IRECV(a(1,i), n, MPI_REAL, i, tag,
                          comm, requests(i), ierr)
        END DO
        DO WHILE(.TRUE.)
           CALL MPI_WAITSOME(size, request_list, numdone,
                            indices, statuses, ierr)
           DO i=1, numdone
              CALL DO_SERVICE(a(1, indices(i)))
              CALL MPI_IRECV(a(1, indices(i)), n, MPI_REAL, 0, tag,
                           comm, requests(indices(i)), ierr)
           END DO
        END DO
    END IF
.fi
.sp
.SH NOTES
.ft R
The array of indices are in the range 0 to incount-1 for C and in the range 1 to incount for Fortran.

.SH ERRORS
For each invocation of MPI_Waitsome, if one or more requests generate
an MPI exception, only the \fIfirst\fP MPI request that caused an
exception will be passed to its corresponding error handler.  No other
error handlers will be invoked (even if multiple requests generated
exceptions).  However, \fIall\fP requests that generate an exception
will have a relevant error code set in the corresponding
status.MPI_ERROR field (unless MPI_STATUSES_IGNORE was used).
.sp
The default error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with MPI_Comm_set_errhandler,
MPI_File_set_errhandler, or MPI_Win_set_errhandler (depending on the
type of MPI handle that generated the MPI request); the predefined
error handler MPI_ERRORS_RETURN may be used to cause error values to
be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
.sp
If the invoked error handler allows MPI_Waitsome to return to the
caller, the value MPI_ERR_IN_STATUS will be returned in the C and
Fortran bindings.  In C++, if the predefined error handler
MPI::ERRORS_THROW_EXCEPTIONS is used, the value MPI::ERR_IN_STATUS
will be contained in the MPI::Exception object.  The MPI_ERROR field
can then be examined in the array of returned statuses to determine
exactly which request(s) generated an exception.

.SH SEE ALSO
.ft R
.sp
MPI_Comm_set_errhandler
.br
MPI_File_set_errhandler
.br
MPI_Test
.br
MPI_Testall
.br
MPI_Testany
.br
MPI_Testsome
.br
MPI_Wait
.br
MPI_Waitall
.br
MPI_Waitany
.br
MPI_Win_set_errhandler
.br

