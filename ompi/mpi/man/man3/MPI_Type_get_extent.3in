.\" -*- nroff -*-
.\" Copyright 2013 Los Alamos National Security, LLC. All rights reserved.
.\" Copyright 2010 Cisco Systems, Inc.  All rights reserved.
.\" Copyright 2006-2008 Sun Microsystems, Inc.
.\" Copyright (c) 1996 Thinking Machines Corporation
.\" $COPYRIGHT$
.TH MPI_Type_get_extent 3 "#OMPI_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.SH NAME
\fBMPI_Type_get_extent\fP, \fBMPI_Type_get_extent_x\fP \- Returns the lower bound and extent of a data type.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Type_get_extent(MPI_Datatype \fIdatatype\fP, MPI_Aint\fI *lb\fP,
	MPI_Aint *\fIextent\fP)
int MPI_Type_get_extent_x(MPI_Datatype \fIdatatype\fP, MPI_Count\fI *lb\fP,
	MPI_Count *\fIextent\fP)

.fi
.SH Fortran Syntax (see FORTRAN 77 NOTES)
.nf
USE MPI
! or the older form: INCLUDE 'mpif.h'
MPI_TYPE_GET_EXTENT(\fIDATATYPE, LB, EXTENT, IERROR\fP)
	INTEGER	\fIDATATYPE, IERROR\fP
	INTEGER(KIND=MPI_ADDRESS_KIND) \fILB, EXTENT\fP
MPI_TYPE_GET_EXTENT_X(\fIDATATYPE, LB, EXTENT, IERROR\fP)
	INTEGER	\fIDATATYPE, IERROR\fP
	INTEGER(KIND=MPI_COUNT_KIND) \fILB, EXTENT\fP

.fi
.SH Fortran 2008 Syntax
.nf
USE mpi_f08
MPI_Type_get_extent(\fIdatatype\fP, \fIlb\fP, \fIextent\fP, \fIierror\fP)
	TYPE(MPI_Datatype), INTENT(IN) :: \fIdatatype\fP
	INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: \fIlb\fP, \fIextent\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP
MPI_Type_get_extent_x(\fIdatatype\fP, \fIlb\fP, \fIextent\fP, \fIierror\fP)
	TYPE(MPI_Datatype), INTENT(IN) :: \fIdatatype\fP
	INTEGER(KIND = MPI_COUNT_KIND), INTENT(OUT) :: \fIlb\fP, \fIextent\fP
	INTEGER, OPTIONAL, INTENT(OUT) :: \fIierror\fP

.fi
.SH C++ Syntax
.nf
#include <mpi.h>
void MPI::Datatype::Get_extent(MPI::Aint& \fIlb\fP, MPI::Aint& \fIextent\fP)
	const

.fi
.SH INPUT PARAMETER
.ft R
.TP 1i
datatype
Data type (handle).
.sp
.SH OUTPUT PARAMETERS
.ft R
.TP 1i
lb
Lower bound of data type (integer).
.TP 1i
extent
Data type extent (integer).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer).

.SH DESCRIPTION
.ft R
MPI_Type_get_extent returns the lower bound and the extent of \fIdatatype\fP. For either function, if either the \fIlb\fP or \fIextent\fP parameter cannot express the value to be returned (e.g., if the parameter is too small to hold the output value), it is set to MPI_UNDEFINED.

.SH NOTE
.ft R
Use of MPI_Type_get_extent is strongly recommended over the old MPI-1 functions MPI_Type_extent and MPI_Type_lb.

.SH FORTRAN 77 NOTES
.ft R
The MPI standard prescribes portable Fortran syntax for
the \fILB\fP and \fIEXTENT\fP arguments only for Fortran 90. FORTRAN 77
users may use the non-portable syntax
.sp
MPI_Type_get_extent:
.sp
.nf
     INTEGER*MPI_ADDRESS_KIND \fILB\fP
or
     INTEGER*MPI_ADDRESS_KIND \fIEXTENT\fP
.fi
.sp
MPI_Type_get_extent_x:
.sp
.nf
     INTEGER*MPI_COUNT_KIND \fILB\fP
or
     INTEGER*MPI_COUNT_KIND \fIEXTENT\fP
.fi
.sp
where MPI_ADDRESS_KIND and MPI_COUNT_KIND are constants defined in mpif.h
and give the length of the declared integer in bytes.

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI::Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.
