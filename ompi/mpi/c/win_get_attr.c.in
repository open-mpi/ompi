/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2015      Los Alamos National Security, LLC. All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */
#include "ompi_config.h"
#include <stdio.h>

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/attribute/attribute.h"
#include "ompi/win/win.h"

PROTOTYPE ERROR_CLASS win_get_attr(WIN win, ATTR_KEY win_keyval,
                                   BUFFER_OUT attribute_val, INT_OUT flag)
{
    int ret;

    if (MPI_PARAM_CHECK) {
       OMPI_ERR_INIT_FINALIZE(FUNC_NAME);

       if (ompi_win_invalid(win)) {
           return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_WIN, FUNC_NAME);
       } else if ((NULL == attribute_val) || (NULL == flag)) {
           return OMPI_ERRHANDLER_INVOKE(win, MPI_ERR_ARG, FUNC_NAME);
        } else if (MPI_KEYVAL_INVALID == win_keyval) {
            return OMPI_ERRHANDLER_INVOKE(win, MPI_ERR_KEYVAL, FUNC_NAME);
       }
    }

    /* This stuff is very confusing.  Be sure to see
       src/attribute/attribute.c for a lengthy comment explaining Open
       MPI attribute behavior. */

    ret = ompi_attr_get_c(win->w_keyhash, win_keyval,
                          (void**)attribute_val, flag);
#if OMPI_ABI_SRC
    /*
     * cases for attributes attached to window that
     * need to get special treatment
     */

    if (MPI_WIN_CREATE_FLAVOR == win_keyval) {
        int win_flavor = *(int *)attribute_val;
        switch(win_flavor) {
        case MPI_WIN_FLAVOR_CREATE:
            *(int **)attribute_val = &ompi_abi_mpi_win_flavor_create;
            break;
        case MPI_WIN_FLAVOR_ALLOCATE:
            *(int **)attribute_val = &ompi_abi_mpi_win_flavor_allocate;
            break;
        case MPI_WIN_FLAVOR_SHARED:
            *(int **)attribute_val = &ompi_abi_mpi_win_flavor_shared;
            break;
        case MPI_WIN_FLAVOR_DYNAMIC:
            *(int **)attribute_val = &ompi_abi_mpi_win_flavor_dynamic;
            break;
        default:
           /* just leave it be */
            break;
        }
    } else if (MPI_WIN_MODEL == win_keyval) {
        int win_model = *(int *)attribute_val;
        switch(win_model) {
        case MPI_WIN_UNIFIED:
            *(int **)attribute_val = &ompi_abi_mpi_win_model_unified;
            break;
        case MPI_WIN_SEPARATE:
            *(int **)attribute_val = &ompi_abi_mpi_win_model_separate;
            break;
        default:
           /* just leave it be */
            break;
        }
    }
#endif

    OMPI_ERRHANDLER_RETURN(ret, win, MPI_ERR_OTHER, FUNC_NAME);
}
