/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2008 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"

PROTOTYPE ERROR_CLASS type_create_struct(COUNT count,
                                         COUNT_ARRAY array_of_blocklengths,
                                         AINT_COUNT_ARRAY array_of_displacements,
                                         DATATYPE_ARRAY array_of_types,
                                         DATATYPE_OUT newtype)
{
    int i, rc;

    if ( count > 0 ) {
        for ( i = 0; i < count; i++ ) {
            MEMCHECKER(
                memchecker_datatype(array_of_types[i]);
                );
        }
    }

    if( MPI_PARAM_CHECK ) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if( count < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT,
                                          FUNC_NAME);
        } else if( (count > 0) && (NULL == array_of_blocklengths ||
                                   NULL == array_of_displacements ||
                                   NULL == array_of_types) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
        } else if (NULL == newtype) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE, FUNC_NAME);
        }
        for ( i = 0; i < count; i++ ){
            if (NULL == array_of_types[i] ||
                MPI_DATATYPE_NULL == array_of_types[i]) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE,
                                              FUNC_NAME);
            } else if (array_of_blocklengths[i] < 0) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG,
                                              FUNC_NAME);
            }
        }
    }

    rc = ompi_datatype_create_struct( count, OMPI_COUNT_ARRAY_CREATE(array_of_blocklengths),
                                      OMPI_DISP_ARRAY_CREATE(array_of_displacements),
                                      array_of_types, newtype );
    if( rc != MPI_SUCCESS ) {
        ompi_datatype_destroy( newtype );
        OMPI_ERRHANDLER_NOHANDLE_RETURN( rc,
                                rc, FUNC_NAME );
    }

    {
        ompi_count_array_t a_i[2] = {OMPI_COUNT_ARRAY_CREATE(&count), OMPI_COUNT_ARRAY_CREATE(array_of_blocklengths)};
        ompi_datatype_set_args( *newtype,
                                (sizeof(count) != sizeof(size_t)) ? count + 1 : 0,
                                (sizeof(count) == sizeof(size_t)) ? count + 1 : 0,
                                a_i, count, OMPI_DISP_ARRAY_CREATE(array_of_displacements),
                                count, array_of_types, MPI_COMBINER_STRUCT );
    }

    return MPI_SUCCESS;
}
