/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2008 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2006      Cisco Systems, Inc.  All rights reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */
#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"


PROTOTYPE ERROR_CLASS type_contiguous(COUNT count,
                                      DATATYPE oldtype,
                                      DATATYPE_OUT newtype)
{
    int rc;

    MEMCHECKER(
        memchecker_datatype(oldtype);
        );

    if( MPI_PARAM_CHECK ) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if (MPI_DATATYPE_NULL == oldtype || NULL == oldtype ||
            NULL == newtype) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE, FUNC_NAME);
        } else if( count < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT, FUNC_NAME);
        }
    }

    rc = ompi_datatype_create_contiguous( count, oldtype, newtype );
    OMPI_ERRHANDLER_NOHANDLE_CHECK(rc, rc, FUNC_NAME );

    /* data description */
    {
        ompi_count_array_t a_i[1] = {OMPI_COUNT_ARRAY_CREATE(&count)};
        ompi_datatype_set_args( *newtype,
                                (sizeof(count) == sizeof(size_t)) ? 0 : 1,
                                (sizeof(count) == sizeof(size_t)) ? 1 : 0,
                                a_i, 0, OMPI_COUNT_ARRAY_NULL, 1, &oldtype, MPI_COMBINER_CONTIGUOUS );
    }

    OMPI_ERRHANDLER_NOHANDLE_RETURN(rc, rc, FUNC_NAME );
}
