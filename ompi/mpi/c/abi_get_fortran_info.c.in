/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2018-2025 Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/info/info.h"

PROTOTYPE ERROR_CLASS abi_get_fortran_info(INFO_OUT info)
{
    char tmp[16];
    ompi_info_t *newinfo = NULL;
    const char true_str[]="true";
    const char false_str[]="false";
    const char *cptr;
    int ret = MPI_SUCCESS;

    if (MPI_PARAM_CHECK) {
        if (NULL == info) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_INFO,
                                          FUNC_NAME);
        }
    }

#if OMPI_BUILD_FORTRAN_BINDINGS

    *info = ompi_info_allocate ();
    if (NULL == (*info)) {
        return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_NO_MEM,
                                      FUNC_NAME);
    }


#if OMPI_SIZEOF_FORTRAN_LOGICAL
    snprintf(tmp, 16, "%d", OMPI_SIZEOF_FORTRAN_LOGICAL);
    ret = opal_info_set(&newinfo->super, "mpi_logical_size", tmp);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
#endif

#if OMPI_SIZEOF_FORTRAN_INTEGER
    snprintf(tmp, 16, "%d", OMPI_SIZEOF_FORTRAN_INTEGER);
    ret = opal_info_set(&newinfo->super, "mpi_integer_size", tmp);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
#endif

#if OMPI_SIZEOF_FORTRAN_REAL
    snprintf(tmp, 16, "%d", OMPI_SIZEOF_FORTRAN_REAL);
    ret = opal_info_set(&newinfo->super, "mpi_real_size", tmp);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
#endif

#if OMPI_SIZEOF_FORTRAN_DOUBLE_PRECISION
    snprintf(tmp, 16, "%d", OMPI_SIZEOF_FORTRAN_DOUBLE_PRECISION);
    ret = opal_info_set(&newinfo->super, "mpi_double_precision_size", tmp);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
#endif

#if OMPI_SIZEOF_FORTRAN_LOGICAL1
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_logical1_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_LOGICAL2
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_logical2_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_LOGICAL4
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_logical4_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_LOGICAL8
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_logical8_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_LOGICAL16
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_logical16_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_INTEGER1
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_integer1_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_INTEGER2
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_integer2_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_INTEGER4
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_integer4_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_INTEGER8
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_integer8_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_INTEGER16
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_integer16_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_REAL4
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_real2_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_REAL4
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_real4_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_REAL8
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_real8_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_REAL16
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_real16_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_COMPLEX4
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_complex4_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_COMPLEX8
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_complex8_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }
    
#if OMPI_SIZEOF_FORTRAN_COMPLEX16
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_complex16_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_COMPLEX32
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_complex32_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

#if OMPI_SIZEOF_FORTRAN_DOUBLE_COMPLEX
    cptr = true_str;
#else
    cptr = false_str;
#endif
    ret = opal_info_set(&newinfo->super, "mpi_double_complex_supported", cptr);
    if (OPAL_SUCCESS != ret) {
        goto err_cleanup;
    }

    *info = newinfo;

#else

    *info = MPI_INFO_NULL;

#endif /*  OMPI_BUILD_FORTRAN_BINDINGS */

    return ret;

err_cleanup:
    ompi_info_free(&newinfo);
    return ret;

    return MPI_SUCCESS;
}
