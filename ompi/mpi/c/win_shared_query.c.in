/*
 * Copyright (c) 2012-2013 Sandia National Laboratories. All rights reserved.
 * Copyright (c) 2015-2017 Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c)      2024 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * Copyright (c) 2025      Stony Brook University.  All rights reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"
#include <stdio.h>

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/win/win.h"
#include "ompi/mca/osc/osc.h"

PROTOTYPE ERROR_CLASS win_shared_query(WIN win, SOURCE rank, AINT_OUT size, INT_AINT_OUT disp_unit, BUFFER_OUT baseptr)
{
    size_t tsize;
    ptrdiff_t du;
    int rc = OMPI_SUCCESS;

    if (MPI_PARAM_CHECK) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);

        if (ompi_win_invalid(win)) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_WIN, FUNC_NAME);
         } else if (MPI_PROC_NULL != rank && ompi_win_peer_invalid(win, rank)) {
            return OMPI_ERRHANDLER_INVOKE(win, MPI_ERR_RANK, FUNC_NAME);
         }
    }

    if (MPI_WIN_FLAVOR_DYNAMIC == win->w_flavor) {
        rc = MPI_ERR_RMA_FLAVOR;
    } else {
        rc = OMPI_ERR_NOT_SUPPORTED;
    }

    if (NULL != win->w_osc_module->osc_win_shared_query) {
        rc = win->w_osc_module->osc_win_shared_query(win, rank, &tsize, &du, baseptr);
        if (OMPI_SUCCESS == rc) {
            *size = tsize;
            *disp_unit = du;
        }
    }

    if (OMPI_ERR_NOT_SUPPORTED == rc) {
        /* gracefully bail out */
        *size = 0;
        *disp_unit = 0;
        *(void**) baseptr = NULL;
        rc = MPI_SUCCESS; // don't raise an error if the function is not supported
    }

    OMPI_ERRHANDLER_RETURN(rc, win, rc, FUNC_NAME);
}
