/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2008 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2009      Sun Microsystems, Inc. All rights reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"

/*
 * TODO:BIGCOUNT this file will need to be updated once
 * the datatype framework supports bigcount 
 */

PROTOTYPE ERROR_CLASS type_create_subarray(INT ndims,
                                           COUNT_ARRAY size_array,
                                           COUNT_ARRAY subsize_array,
                                           COUNT_ARRAY start_array,
                                           SUBARRAY_ORDER  order,
                                           DATATYPE oldtype,
                                           DATATYPE_OUT newtype)
{
    int32_t i, rc;
    int *isize_array = NULL;
    int *isubsize_array = NULL;
    int *istart_array = NULL;

    MEMCHECKER(
        memchecker_datatype(oldtype);
        );

    if (MPI_PARAM_CHECK) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if( ndims < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT, FUNC_NAME);
        } else if( (ndims > 0) && ((NULL == size_array) || (NULL == subsize_array) || (NULL == start_array)) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
        } else if( (NULL == oldtype) || (MPI_DATATYPE_NULL == oldtype) || (NULL == newtype) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE, FUNC_NAME);
        } else if( (MPI_ORDER_C != order) && (MPI_ORDER_FORTRAN != order) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
        }
        for( i = 0; i < ndims; i++ ) {
#if OMPI_BIGCOUNT_SRC
            OMPI_CHECK_MPI_COUNT_INT_CONVERSION_OVERFLOW(rc, size_array[i]);
            if (OMPI_SUCCESS != rc) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(rc, FUNC_NAME);
            }
            OMPI_CHECK_MPI_COUNT_INT_CONVERSION_OVERFLOW(rc, subsize_array[i]);
            if (OMPI_SUCCESS != rc) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(rc, FUNC_NAME);
            }
            OMPI_CHECK_MPI_COUNT_INT_CONVERSION_OVERFLOW(rc, start_array[i]);
            if (OMPI_SUCCESS != rc) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(rc, FUNC_NAME);
            }
#endif
            if( (subsize_array[i] < 1) || (subsize_array[i] > size_array[i]) ) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
            } else if( (start_array[i] < 0) || (start_array[i] > (size_array[i] - subsize_array[i])) ) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
            }
        }
    }

#if OMPI_BIGCOUNT_SRC
    isize_array = (int *)malloc(ndims * sizeof(int));
    if (NULL == isize_array) {
        return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_NO_MEM, FUNC_NAME);
    }
    isubsize_array = (int *)malloc(ndims * sizeof(int));
    if (NULL == isubsize_array) {
        free(isize_array);
        return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_NO_MEM, FUNC_NAME);
    }
    istart_array = (int *)malloc(ndims * sizeof(int));
    if (NULL == istart_array) {
        free(isize_array);
        free(isubsize_array);
        return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_NO_MEM, FUNC_NAME);
    }
    for (int ii = 0; ii < ndims; ii++) {
        isize_array[ii] = (int)size_array[ii];
        isubsize_array[ii] = (int)subsize_array[ii];
        istart_array[ii] = (int)start_array[ii];
    }
#else
    isize_array = (int *)size_array;
    isubsize_array = (int *)subsize_array;
    istart_array = (int *)start_array;
#endif
    rc = ompi_datatype_create_subarray( ndims, isize_array, isubsize_array, istart_array,
                                        order, oldtype, newtype);
    if( OMPI_SUCCESS == rc ) {
        const int* a_i[5] = {&ndims, isize_array, isubsize_array, istart_array, &order};

        ompi_datatype_set_args( *newtype, 3 * ndims + 2, a_i, 0, NULL, 1, &oldtype,
                                MPI_COMBINER_SUBARRAY );
    }

#if OMPI_BIGCOUNT_SRC
    free(isize_array);
    free(isubsize_array);
    free(istart_array);
#endif
    OMPI_ERRHANDLER_NOHANDLE_RETURN(rc, rc, FUNC_NAME);
}
