/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2008 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2009      Sun Microsystems, Inc. All rights reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"


PROTOTYPE ERROR_CLASS type_create_subarray(INT ndims,
                                           COUNT_ARRAY size_array,
                                           COUNT_ARRAY subsize_array,
                                           COUNT_ARRAY start_array,
                                           INT order,
                                           DATATYPE oldtype,
                                           DATATYPE_OUT newtype)
{
    int32_t i, rc;

    MEMCHECKER(
        memchecker_datatype(oldtype);
        );

    if (MPI_PARAM_CHECK) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if( ndims < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT, FUNC_NAME);
        } else if( (ndims > 0) && ((NULL == size_array) || (NULL == subsize_array) || (NULL == start_array)) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
        } else if( (NULL == oldtype) || (MPI_DATATYPE_NULL == oldtype) || (NULL == newtype) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE, FUNC_NAME);
        } else if( (MPI_ORDER_C != order) && (MPI_ORDER_FORTRAN != order) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
        }
        for( i = 0; i < ndims; i++ ) {
            if( (subsize_array[i] < 1) || (subsize_array[i] > size_array[i]) ) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
            } else if( (start_array[i] < 0) || (start_array[i] > (size_array[i] - subsize_array[i])) ) {
                return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG, FUNC_NAME);
            }
        }
    }

    rc = ompi_datatype_create_subarray( ndims, OMPI_COUNT_ARRAY_CREATE(size_array), OMPI_COUNT_ARRAY_CREATE(subsize_array),
                                        OMPI_COUNT_ARRAY_CREATE(start_array),
                                        order, oldtype, newtype);
    if( OMPI_SUCCESS == rc ) {
        ompi_count_array_t a_i[5] = {OMPI_COUNT_ARRAY_CREATE(&ndims),
                                     OMPI_COUNT_ARRAY_CREATE(size_array),
                                     OMPI_COUNT_ARRAY_CREATE(subsize_array),
                                     OMPI_COUNT_ARRAY_CREATE(start_array),
                                     OMPI_COUNT_ARRAY_CREATE(&order)};
        size_t ci, cl;
        if (sizeof(size_array[0]) == sizeof(size_t)) {
            ci = 2;
            cl = 3*ndims;
        } else {
            ci = 3*ndims + 2;
            cl = 0;
        }
        ompi_datatype_set_args( *newtype, ci, cl, a_i, 0, OMPI_DISP_ARRAY_NULL, 1, &oldtype,
                                MPI_COMBINER_SUBARRAY );
    }

    OMPI_ERRHANDLER_NOHANDLE_RETURN(rc, rc, FUNC_NAME);
}
