.TH "FI_FABRIC" 3 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_fabric \- Fabric domain operations
.PP
fi_fabric / fi_close
.RS
Open / close a fabric domain
.RE
.PP
fi_tostr
.RS
Convert fabric attributes, flags, and capabilities to printable string
.RE
.SH SYNOPSIS
.B "#include <rdma/fabric.h>"
.HP
.BI "int fi_fabric(struct fi_fabric_attr *" attr ","
.BI "struct fid_fabric **" fabric ", void *" context ");"
.HP
.BI "int fi_close(struct fid *" fabric ");"
.HP
.BI "char * fi_tostr(const void *" data ", enum fi_type " datatype ");"
.SH ARGUMENTS
.IP "attr" 12
Attributes of fabric to open.
.IP "fabric" 12
Fabric domain
.IP "context" 12
User specified context associated with the opened object.  This context is
returned as part of any associated asynchronous event.
.SH "DESCRIPTION"
A fabric domain represents a collection of hardware and software resources
that access a single physical or virtual network.  All network ports on a
system that can communicate with each other through their attached
networks belong to the same fabric domain.  A fabric domain shares
network addresses and can span multiple providers.
.SS "fi_fabric"
Opens a fabric provider.  The attributes of the fabric provider are
specified through the open call, and may be obtained by calling fi_getinfo.
.SS "fi_close"
The fi_close call is used to release all resources associated with a fabric
domain or interface.  All items associated with the opened fabric must
be released prior to calling fi_close.
.SS "fi_tostr"
Converts fabric interface attributes, capabilities, flags, and enum values
into a printable string.  The data parameter accepts a pointer to the
attribute or value(s) to display, with the datatype parameter indicating
the type of data referenced by the data parameter.  Valid values for the
datatype are listed below, along with the corresponding datatype or field
value.
.IP "FI_TYPE_INFO"
struct fi_info
.IP "FI_TYPE_EP_TYPE"
struct fi_info::type field
.IP "FI_TYPE_EP_CAP"
struct fi_info::ep_cap field
.IP "FI_TYPE_OP_FLAGS"
struct fi_info::op_flags field, or general uint64_t flags
.IP "FI_TYPE_ADDR_FORMAT"
struct fi_info::addr_format field
.IP "FI_TYPE_TX_ATTR"
struct fi_tx_ctx_attr
.IP "FI_TYPE_RX_ATTR"
struct fi_rx_ctx_attr
.IP "FI_TYPE_EP_ATTR"
struct fi_ep_attr
.IP "FI_TYPE_DOMAIN_ATTR"
struct fi_domain_attr
.IP "FI_TYPE_FABRIC_ATTR"
struct fi_fabric_attr
.IP "FI_TYPE_DOMAIN_CAP"
struct fi_info::domain_cap field
.IP "FI_TYPE_THREADING"
enum fi_threading
.IP "FI_TYPE_PROGRESS"
enum fi_progress
.IP "FI_TYPE_PROTO"
struct fi_ep_attr::protocol field
.IP "FI_TYPE_MSG_ORDER"
struct fi_ep_attr::msg_order field
.SH "NOTES"
The following resources are associated with fabric domains: access domains,
passive endpoints, and CM event queues.
.SH "FABRIC ATTRIBUTES"
The fi_fabric_attr structure defines the set of attributes associated with a
fabric and a fabric provider.
.sp
.nf
struct fi_fabric_attr {
	struct fid_fabric *fabric;
	char              *name;
	char              *prov_name;
	uint32_t          prov_version;
};
.fi
.SS "fabric"
On input to fi_getinfo, a user may set this to an opened fabric instance to
restrict output to the given fabric.  On output from fi_getinfo, if no fabric
was specified, but the user has an opened instance of the named fabric, this will
reference the first opened instance.  If no instance has been opened, this
field will be NULL.
.SS "Name"
A fabric identifier.
.SS "Provider Name"
The name of the underlying fabric provider.
.SS "Provider Version"
Version information for the fabric provider.
.SH "RETURN VALUE"
Returns 0 on success. On error, a negative value corresponding to fabric
errno is returned. Fabric errno values are defined in 
.IR "rdma/fi_errno.h".
.SH "ERRORS"
.SH "SEE ALSO"
fabric(7), fi_getinfo(3), fi_domain(3), fi_eq(3), fi_endpoint(3)
