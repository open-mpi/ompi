.TH "FI_EQ" 3 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_eq \- Event queue operations
.PP
fi_eq_open / fi_close
.RS
Open/close an event queue
.RE
.PP
fi_eq_read / fi_eq_readerr
.RS
Read an event from an event queue
.RE
.PP
fi_eq_write
.RS
Writes an event to an event queue
.RE
.PP
fi_eq_sread
.RS
A synchronous (blocking) read of an event queue
.RE
.PP
fi_eq_strerror
.RS
Converts provider specific error information into a printable string
.RE
.SH SYNOPSIS
.B #include <rdma/fi_domain.h>
.HP
.BI "int fi_eq_open(struct fid_fabric *" fabric ", struct fi_eq_attr *" attr ", "
.BI "struct fid_eq **" eq ", void * " context ");"
.HP
.BI "int fi_close(struct fid *" eq ");"
.HP
.BI "int fi_control(struct fid *" eq ", int " command ", void *" arg ");"
.PP
.HP
.BI "int fi_eq_read(struct fid_eq *" eq ", uint32_t *" event ", "
.BI "void *" buf ", size_t " len ", uint64_t " flags ");"
.HP
.BI "int fi_eq_readerr(struct fid_eq *" eq ", "
.BI "struct fi_eq_err_entry *" buf ", size_t " len ", "
.BI "uint64_t " flags ");"
.PP
.HP
.BI "int fi_eq_write(struct fid_eq *" eq ", uint32_t " event ", "
.BI "const void *" buf ", size_t " len ", uint64_t " flags ");"
.PP
.HP
.BI "int fi_eq_sread(struct fid_eq *" eq ", uint32_t *" event ", "
.BI "void *" buf ", size_t " len ", "
.BI "int " timeout ", uint64_t " flags ");"
.PP
.HP
.BI "const char * fi_eq_strerror(struct fid_eq *" eq ", int " prov_errno ", "
.BI "const void *" err_data ", void *" buf ", size_t" len ");"
.SH ARGUMENTS
.IP "fabric"
Opened fabric descriptor
.IP "domain"
Open resource domain
.IP "eq"
Event queue 
.IP "attr"
Event queue attributes
.IP "context"
User specified context associated with the event queue.
.IP "event"
Reported event
.IP "buf"
For read calls, the data buffer to write events into.
.br
For write calls, an event to insert into the event queue.
.br
For fi_eq_strerror, an optional buffer that receives printable error information.
.IP "len"
Length of data buffer
.IP "flags"
Additional flags to apply to the operation
.IP "prov_errno"
Provider specific error value
.IP "err_data"
Provider specific error data related to a completion
.IP "timeout"
Timeout specified in miliseconds
.SH "DESCRIPTION"
Event queues are used to report events associated with control operations.
They are associated with memory registration, address vectors, connection
management, and fabric and domain level events.  Reported events are
either associated with a requested operation or affiliated with a
call that registers for specific
types of events, such as listening for connection requests.
.SS "fi_eq_open"
fi_eq_open allocates a new event queue.
.PP 
The properties and behavior of an event queue are defined by struct fi_eq_attr.
.PP
.nf

struct fi_eq_attr {
	size_t               size;      /* # entries for EQ */
	uint64_t             flags;     /* operation flags */
	enum fi_wait_obj     wait_obj;  /* requested wait object */
	int                  signaling_vector; /* interrupt affinity */
	struct fid_wait     *wait_set;  /* optional wait set */
};

.fi
.IP "size"
Specifies the minimum size of an event queue.
.IP "flags"
Flags that control the configuration of the EQ.
.RS
.IP "FI_WRITE"
Indicates that the application requires support for inserting user events
into the EQ.  If this flag is set, then the fi_eq_write operation must be
supported by the provider.  If the FI_WRITE flag is not set, then the
application may not invoke fi_eq_write. 
.RE
.IP "wait_obj"
EQ's may be associated with a specific wait object.  Wait objects allow
applications to block until the wait object is signaled, indicating that
an event is available to be read.  Users may use fi_control to retrieve
the underlying wait object associated with an EQ, in order to use it in
other system calls.  The following values may be used to specify the type
of wait object associated with an EQ:
.RS
.IP "FI_WAIT_NONE"
Used to indicate that the user will not block (wait) for events on the EQ.
When FI_WAIT_NONE is specified, the application may not call fi_eq_sread.
.IP "FI_WAIT_UNSPEC"
Specifies that the user will only wait on the EQ using fabric interface
calls, such as fi_eq_sread.  In this case, the underlying provider may
select the most appropriate or highest performing wait object available,
including custom wait mechanisms.  Applications that select
FI_WAIT_UNSPEC are not guaranteed to retrieve the underlying wait
object.
.IP "FI_WAIT_SET"
Indicates that the event queue should use a wait set object to wait
for events.  If specified, the wait_set field must reference an existing
wait set object.
.IP "FI_WAIT_FD"
Indicates that the EQ should use a file descriptor as its wait mechanism.
A file descriptor wait object must be usable in select, poll, and epoll
routines.  However, a provider may signal an FD wait object by marking it
as readable, writable, or with an error.
.IP "FI_WAIT_MUT_COND"
Specifies that the EQ should use a pthread mutex and cond variable as a
wait object.
.RE
.IP "signaling_vector"
Indicates which processor core interrupts associated with the EQ should
target.
.IP "wait_set"
If wait_obj is FI_WAIT_SET, this field references a wait object to which the
event queue should attach.  When an event is inserted into the event queue,
the corresponding wait set will be signaled if all necessary conditions are
met.  The use of a wait_set enables an optimized method of waiting for events
across multiple event queues.  This field is ignored if wait_obj is not
FI_WAIT_SET. 
.SS "fi_close"
The fi_close call releases all resources associated with an event
queue.  The EQ must not be bound to any other resources prior to
being closed.  Any events which remain on the EQ when it is closed are
lost.
.SS "fi_control"
The fi_control call is used to access provider or implementation specific
details of the event queue.  Access to the EQ should be serialized
across all calls when fi_control is invoked, as it may redirect the
implementation of EQ operations.  The following control commands are usable
with an EQ.
.IP "FI_GETWAIT (void **)"
This command allows the user to retrieve the low-level wait object
associated with the EQ.  The format of the wait-object is specified during
EQ creation, through the EQ attributes.  The fi_control arg parameter
should be an address where a pointer to the returned wait object
will be written.
.SS "fi_eq_read"
The fi_eq_read operations performs a non-blocking read of
event data from the EQ.  The format of the event data is based on the type
of event retrieved from the EQ, with all events starting with a
struct fi_eq_entry header.  At most one event will be returned per EQ read
operation.  The number of bytes successfully read from the EQ is returned
from the read.  The FI_PEEK flag may be used to indicate that event
data should be read from the EQ without being consumed.  A subsequent
read without the FI_PEEK flag would then remove the event from the EQ.
.PP
The following types of events may be reported to an EQ, along with
information regarding the format associated with each event.
.IP "Asynchronous Control Operations"
Asynchronous control operations are basic requests that simply need to
generate an event to indicate that they have completed.  These include
the following types of events: memory registration, address vector resolution,
connection established, and multicast join.
.sp
Control requests report their completion by inserting a struct fi_eq_entry
into the EQ.  The format of this structure is:
.nf

struct fi_eq_entry {
	fid_t            fid;        /* fid associated with request */
	void            *context;    /* operation context */
	uint32_t         data;       /* completion dependent data */
};

.fi
For the completion of basic asynchronous control operations, the returned event
will be to FI_COMPLETE.  The fid will reference the fabric descriptor
associated with the event.  For memory registration, this will be the fid_mr,
address resolution will reference a fid_av, and CM events will refer to a
fid_ep.  The context field will be set to the context specified as part of
the operation.
.IP "Connection Request Notification"
Connection requests are unsolicited notifications that a remote endpoint
wishes to establish a new connection to a listening passive endpoint.
Connection requests are reported using struct fi_eq_cm_entry:
.nf

struct fi_eq_cm_entry {
	fid_t            fid;        /* fid associated with request */
	struct fi_info  *info;       /* endpoint information */
	uint8_t         data[0];     /* app connection data */
};

.fi
Connection request events are of type FI_CONNREQ.  The fid is the passive
endpoint.  Information regarding the requested endpoint's capabilities and
attributes are available from the info field.  The application is
responsible for freeing this structure by calling fi_freeinfo when it
is no longer needed.  The fi_info connreq field will reference the
connection request associated with this event.  For an accepted
connection, the connreq must be associated with an endpoint when
it is opened.  Typically, this is done by simply passing the fi_info
returned as part of the CM event into fi_endpoint().  If the connection
is rejected, the connreq must be passed into the fi_reject call. 
.sp
Any application data exchanged as part of the connection
request is placed beyond the fi_eq_cm_entry structure.  The amount of data
available is application dependent and limited to the buffer space provided
by the application when fi_eq_read is called.  The amount of returned data
may be calculated using the return value to fi_eq_read.  Note that the amount
of returned data is limited by the underlying connection
protocol, and the length of any data returned may include protocol padding.
As a result, the returned length may be larger than that specified by
the connecting peer.
.IP "Connection Shutdown Notification"
Notification that a remote peer has disconnected from an active endpoint is
done through the FI_SHUTDOWN event.  Shutdown notification uses struct
fi_eq_entry as declared above.  The fid field for a shutdown notification
refers to the active endpoint's fid_ep.  The context field is set to NULL.
.SS "fi_eq_sread"
The fi_eq_sread call is the blocking (or synchronous) equivalent to fi_eq_read.
It behaves is similar to
the non-blocking call, with the exception that the calls will not return
until either an event has been read from the EQ or an error or timeout occurs.
Specifying a negative timeout means an infinite timeout.
.SS "fi_eq_readerr"
The read error function, fi_eq_readerr, retrieves information regarding
any asynchronous operation which has completed with an unexpected error.
fi_eq_readerr is a non-blocking call, returning immediately whether an
error completion was found or not.
.PP
EQs are optimized to report operations which have completed successfully.
Operations which fail are reported 'out of band'.  Such operations are
retrieved using the fi_eq_readerr function.  When an operation
that completes with an unexpected error is inserted
into an EQ, it is placed into a temporary error queue.  Attempting to read
from an EQ while an item is in the error queue results in an FI_EAVAIL
failure.  Applications may use this return code to determine when to
call fi_eq_readerr.
.PP
Error information is reported to the user through struct fi_eq_err_entry.
The format of this structure is defined below.
.nf

struct fi_eq_err_entry {
	fid_t            fid;        /* fid associated with error */
	void            *context;    /* operation context */
	uint32_t         index;      /* index for vector ops */
	int              err;        /* positive error code */
	int              prov_errno; /* provider error code */
	void            *err_data;   /* additional error data */
};

.fi
The fid will reference the fabric descriptor
associated with the event.  For memory registration, this will be the fid_mr,
address resolution will reference a fid_av, and CM events will refer to a
fid_ep.  The context field will be set to the context specified as part of
the operation.
.sp
The general reason for the error is provided through the err field.  Provider
specific error information may also be available through the prov_errno
and err_data fields.  Users may call fi_eq_strerror to convert provider
specific error information into a printable string for debugging purposes.
.SH "RETURN VALUES"
fi_eq_open 
.RS
Returns 0 on success.  On error, a negative value corresponding to
fabric errno is returned.
.RE
.PP
fi_eq_read / fi_eq_readerr
.br
fi_eq_sread
.br
fi_eq_write
.RS
On success, returns the number of bytes read from or written to the
event queue.  On error, a negative value corresponding to fabric errno
is returned.  On timeout, fi_eq_sread returns -FI_ETIMEDOUT.
.RE
.PP
fi_eq_strerror
.RS
Returns a character string interpretation of the provider specific error
returned with a completion.
.RE
.PP
Fabric errno values are defined in
.IR "rdma/fi_errno.h".
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3), fi_cntr(3), fi_poll(3)
