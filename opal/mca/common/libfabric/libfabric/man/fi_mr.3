.TH "FI_MR" 3 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_mr \- Memory region operations
.PP
fi_mr_reg / fi_mr_regv / fi_mr_regattr
.RS
Register local memory buffers for direct fabric access
.RE
.PP
fi_close
.RS
Deregister registered memory buffers.
.RE
.PP
fi_mr_desc
.RS
Return a local descriptor associated with a registered memory region
.RE
.PP
fi_mr_key
.RS
Return the remote key needed to access a registered memory region
.RE
.PP
fi_mr_bind
.RS
Associate a registered memory region with an event collector.
.RE
.SH SYNOPSIS
.B #include <rdma/fi_domain.h>
.HP
.BI "int fi_mr_reg(struct fid_domain *" domain ", "
.BI "const void * " buf ", size_t " len ", "
.BI	"uint64_t " access ", uint64_t " offset ", uint64_t " requested_key ", "
.BI "uint64_t " flags ", struct fid_mr **" mr ", void *" context ");"
.HP
.BI "int fi_mr_regv(struct fid_domain *" domain ", "
.BI "const struct iovec * " iov ", size_t " count ", "
.BI	"uint64_t " access ", uint64_t " offset ", uint64_t " requested_key ", "
.BI "uint64_t " flags ", struct fid_mr **" mr ", void *" context ");"
.HP
.BI "int fi_mr_regattr(struct fid_domain *" domain ", "
.BI "const struct fi_mr_attr * " attr ","
.BI "uint64_t " flags ", struct fid_mr **" mr ");"
.PP
.HP
.BI "int fi_close(struct fid *" mr ");"
.PP
.HP
.BI "void * fi_mr_desc(struct fid_mr *" mr ");"
.HP
.BI "uint64_t fi_mr_key(struct fid_mr *" mr ");"
.PP
.HP
.BI "int fi_mr_bind(struct fid_mr *" mr ", struct fid *" ec ", "
.BI "uint64_t " flags ");"
.SH ARGUMENTS
.IP "domain"
Resource domain
.IP "mr"
Memory region 
.IP "ec"
Event queue or counter
.IP "context"
User specified context associated with the memory region.
.IP "buf"
Memory buffer to register with the fabric hardware
.IP "len"
Length of memory buffer to register
.IP "iov"
Vectored memory buffer.
.IP "count"
Count of vectored buffer entries.
.IP "access"
Memory access permissions associated with registration
.IP "offset"
Optional specified offset for accessing specified registered buffers.
.IP "requested_key"
Optional requested remote key associated with registered buffers.
.IP "attr"
Memory region attributes
.IP "flags"
Additional flags to apply to the operation.
.SH "DESCRIPTION"
Registered memory regions associate memory buffers with permissions
granted for access by fabric resources.  A memory buffer must be
registered with a resource domain before it can be used as the target
of a remote RMA or atomic data transfer.  Additionally, a fabric
provider may require that data buffers be registered before being
used in local transfers.
.PP
A provider may hide local registration requirements from applications
by making use of an internal registration cache or similar mechanisms.
Such mechanisms, however, may negatively impact performance for some
applications, notably those which manage their own network buffers.
In order to support as broad range of applications as possible, without
unduly affecting their performance, applications that wish to manage
their own local memory registrations may do so by using the memory
registration calls.  Applications may use the FI_LOCAL_MR domain
capability bit as a guide.
.PP
Providers may support applications registering any range of addresses
in their virtual address space, whether or not those addresses are
back by physical pages or have been allocated to the app.  Support for
this ability is specified through the FI_DYNAMIC_MR capability flag.
Providers that lack this capability require that registered memory
regions be backed by allocated memory pages.
.PP
The registrations functions -- fi_mr_reg, fi_mr_regv, and fi_mr_regattr --
are used to register one or more memory buffers with fabric resources.
The main difference between registration functions are the number
and type of parameters that they accept as input.  Otherwise,
they perform the same general function.
.PP
By default, memory registration completes synchronously.  I.e. the
registration call will not return until the registration has completed.
Memory registration can complete asynchronous by binding the resource
domain to an event queue using the FI_REG_MR flag.  See fi_domain_bind.
When memory registration is asynchronous, in order to avoid a race condition
between the registration call returning and the corresponding reading
of the event from the EQ, the mr output parameter will
be written before any event associated with the operation may be read by
the application.  An asynchronous event will not be generated unless the
registration call returns success (0).
.SS "fi_mr_reg"
The fi_mr_reg call registers the user-specified memory buffer with
the resource domain.  The buffer is enabled for access by the fabric
hardware based on the provided access permissions.  Supported access
permissions are the bitwise OR of the following:
.IP "FI_SEND"
The memory buffer may be used in outgoing message data transfers.  This
includes fi_msg and fi_tagged operations.
.IP "FI_RECV"
The memory buffer may be used to receive inbound message transfers.
This includes fi_msg and fi_tagged operations.
.IP "FI_READ"
The memory buffer may be used as the result buffer for RMA read
and atomic operations on the initiator side.
.IP "FI_WRITE"
The memory buffer may be used as the source buffer for RMA write
and atomic operations on the initiator side.
.IP "FI_REMOTE_READ"
The memory buffer may be used as the source buffer of an RMA read
operation on the target side.
.IP "FI_REMOTE_WRITE"
The memory buffer may be used as the target buffer of an RMA write
or atomic operation.
.PP
Registered memory is associated with a local memory descriptor and,
optionally, a remote memory key.  A memory descriptor is a provider
specific identifier associated with registered memory.  Memory descriptors
often map to hardware specific indices or keys associated with the
memory region.  Remote memory keys provide limited protection against
unwanted access by a remote node.  Remote accesses to a memory region
must provide the key associated with the registration.
.PP
Because MR keys must be provided by a remote process, an application
can use the requested_key parameter to indicate that a specific key
value be returned.  Support for user requested keys is provider specific
and is determined by the FI_PROV_MR_KEY mode bit.
Access domains must be opened with the FI_PROV_MR_KEY mode cleared
in order to enable support for application selectable MR keys.
.PP
Remote RMA and atomic operations indicate the location within a registered
memory region by specifying an address.  By default, the RMA target address
is a virtual address between the registered buf address and the end of the
registered memory region (buf + len).  Typically, the starting virtual
address and length are provided to the RMA initiator, either during connection
setup or through separate communication messages.
.PP
In order to reduce the amount of state information an application must
maintain regarding target RMA buffers, the memory registration calls allow
a buffer to be associated with a specific target offset.  This offset is
used on the initiator side in lieu of the virtual address.  To associate
a memory region with a specific offset, the FI_MR_OFFSET flag must be
used when registering the memory.
.PP
For asynchronous memory registration requests, the result
will be reported to the user through an event
queue associated with the resource domain.  If successful, the allocated
memory region structure will be returned to the user through the mr
parameter.  The mr address must remain valid until the registration
operation completes.  The context specified with the registration request
is returned with the completion event.
.SS "fi_mr_regv"
The fi_mr_regv call adds support for a scatter-gather list to fi_mr_reg.
Multiple memory buffers are registered as a single memory region.
Otherwise, the operation is the same. 
.SS "fi_mr_regattr"
The fi_mr_regattr call is a more generic, extensible registration call
that allows the user to specify the registration request using a struct
fi_mr_attr.
.PP
.nf
struct fi_mr_attr {
	const struct iovec *mr_iov;       /* scatter-gather array */
	size_t             iov_count;     /* # elements in mr_iov */
	uint64_t           access;        /* access permission flags */
	uint64_t           requested_key; /* requested remote key */
	void               *context;      /* user-defined context */
};
.fi
.SS "fi_close"
Fi_close may be used to release all resources associated with a
registering a memory region.  Once unregistered, further access to the
registered memory is not guaranteed.  For performance reasons,
unregistration processing may be done asynchronously or lazily.  To force
all queued unregistration requests to complete, applications may call
fi_sync on the domain.  Upon completion of a domain fi_sync call, all memory
regions unregistered before fi_sync was invoked will have completed,
and no further access to the registered region, either locally or remotely,
via fabric resources will be possible. 
.SS "fi_mr_desc / fi_mr_key"
The local memory descriptor and remote protection key associated with a
MR may be obtained by calling fi_mr_desc and fi_mr_key, respectively.
The memory registration must have completed successfully before invoking
these calls.
.SS "fi_mr_bind"
The fi_mr_bind function associates a memory region with an event counter
or queue, for providers that support the generation of events based on
fabric operations.  The type of events tracked against the memory region is
based on the bitwise OR of the following flags.
.IP "FI_WRITE"
Generates an event whenever a remote RMA write or atomic operation modify
the memory region.
.SH "FLAGS"
The following flags are usable with fi_mr_reg, fi_mr_regv, fi_mr_regattr.
.IP "FI_MR_KEY"
Indicates that the registered memory region should be associated with the
specified requested_key.  If this flag is not provided, the requested_key
parameter is ignored.
.IP "FI_MR_OFFSET"
Associates the registered memory region with the specified offset as its
base target address.  If this flag is not provided, the offset parameter
is ignored.  When set, any overlapping registration is replaced.
.SH "RETURN VALUES"
Returns 0 on success.  On error, a negative value corresponding to
fabric errno is returned.
.PP
Fabric errno values are defined in
.IR "rdma/fi_errno.h".
.SH "ERRORS"
.IP "-FI_ENOKEY"
The requested_key is already in use.
.IP "-FI_EKEYREJECTED"
The requested_key is not available.  They key may be out of the range
supported by the provider, or the provider may not support user-requested
memory registration keys.
.IP "-FI_ENOSYS"
Returned by fi_mr_bind if the provider does not support reporting events
based on access to registered memory regions.
.IP "-FI_EBADFLAGS"
Returned if the specified flags are not supported by the provider.
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3), fi_rma(3), fi_msg(3), fi_atomic(3)
