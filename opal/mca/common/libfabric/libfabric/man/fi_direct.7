.TH "FI_DIRECT" 7 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
Direct fabric provider access
.SH SYNOPSIS
.B -DFABRIC_DIRECT
.PP
.B #define FABRIC_DIRECT
.PP
Fabric direct provides a mechanism for applications to compile against
a specific fabric providers without going through the libfabric
framework or function vector tables.  This allows for extreme optimization
via function inlining at the cost of supporting multiple providers or
different versions of the same provider.
.SH DESCRIPTION
The use of fabric direct is intended only for applications that require
the absolute minimum software latency, and are willing to re-compile
for specific fabric hardware.  Providers that support fabric direct
implement their own versions of the static inline calls which are define
in the libfabric header files, define selected enum values, and provide
defines for compile-time optimizations.  Applications can then code against
the standard libfabric calls, but link directly against the provider calls by
defining FABRIC_DIRECT as part of their build.
.PP
In general, the use of fabric direct does not require application source
code changes, and, instead, is limited to the build process.
.PP
Providers supporting fabric direct must install 'direct' versions of all
libfabric header files.  For convenience, the libfabric sources contain
sample header files that may be modified by a provider.  The 'direct'
header file names have 'fi_direct' as their prefix: fi_direct.h, 
fi_direct_endpoint.h, etc.
.PP
Direct providers are prohibited from overriding or modifying existing
data structures.  However, provider specific extensions are still available.
In addition to provider direct function calls to provider code, a fabric
direct provider may define zero of more of the following capability
definitions.  Applications can check for these capabilities in order to
optimize code paths at compile time, versus relying on run-time checks.
.SH "CAPABILITY DEFINITIONS"
In order that application code may be optimized during compile time, direct
providers must provide definitions for various capabilities and modes, if those
capabilities are supported.  The following #define values may be used
by an application to test for provider support of supported features.
.IP "FI_DIRECT_WRITE_NONCOHERENT"
The provider sets FI_WRITE_NONCOHERENT for fi_info:mode.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_CONTEXT"
The provider sets FI_CONTEXT for fi_info:mode.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_LOCAL_MR"
The provider sets FI_LOCAL_MR for fi_info:mode.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_PROV_MR_KEY"
The provider sets FI_PROV_MR_KEY for fi_info:mode.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_DYNAMIC_MR"
The provider sets FI_DYNAMIC_MR for fi_info:caps.  See fi_getinfo
for additional details.
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3)
