.TH "FI_CQ" 3 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_cq \- Completion queue operations
.PP
fi_cq_open / fi_close
.RS
Open/close a completion queue
.RE
.PP
fi_cq_read / fi_cq_readfrom / fi_cq_readerr
.RS
Read a completion from a completion queue
.RE
.PP
fi_cq_write / fi_cq_writeerr
.RS
Writes a completion or error event to a completion queue
.RE
.PP
fi_cq_sread / fi_cq_sreadfrom
.RS
A synchronous (blocking) read that waits until a specified condition has
been met before reading a completion from a completion queue.
.RE
.PP
fi_cq_strerror
.RS
Converts provider specific error information into a printable string
.RE
.SH SYNOPSIS
.B #include <rdma/fi_domain.h>
.HP
.BI "int fi_cq_open(struct fid_domain *" domain ", struct fi_cq_attr *" attr ", "
.BI "struct fid_cq **" cq ", void * " context ");"
.HP
.BI "int fi_close(struct fid *" cq ");"
.HP
.BI "int fi_control(struct fid *" cq ", int " command ", void *" arg ");"
.PP
.HP
.BI "int fi_cq_read(struct fid_cq *" cq ","
.BI "void *" buf ", size_t " count ");"
.HP
.BI "int fi_cq_readfrom(struct fid_cq *" cq ","
.BI "void *" buf ", size_t " count ", "
.BI "fi_addr_t *" src_addr ");"
.HP
.BI "int fi_cq_readerr(struct fid_cq *" cq ","
.BI "struct fi_cq_err_entry *" buf ", size_t " len ", "
.BI "uint64_t " flags ");"
.PP
.HP
.BI "int fi_cq_write(struct fid_cq *" cq ","
.BI "const void *" buf ", size_t " len ");"
.HP
.BI "int fi_cq_writeerr(struct fid_cq *" cq ","
.BI "struct fi_cq_err_entry *" buf ", size_t " len ", "
.BI "uint64_t " flags ");"
.PP
.HP
.BI "int fi_cq_sread(struct fid_cq *" cq ","
.BI "void *" buf ", size_t " count ", "
.BI "const void *" cond ", int " timeout ");"
.HP
.BI "int fi_cq_sreadfrom(struct fid_cq *" cq ","
.BI "void *" buf ", size_t " count ","
.BI "fi_addr_t *" src_addr ", const void *" cond ", int " timeout ");"
.PP
.HP
.BI "const char * fi_cq_strerror(struct fid_cq *" cq ", int " prov_errno ", "
.BI "const void *" err_data ", void *" buf ", size_t" len ");"
.SH ARGUMENTS
.IP "domain"
Open resource domain
.IP "cq"
Completion queue 
.IP "attr"
Completion queue attributes
.IP "context"
User specified context associated with the completion queue.
.IP "buf"
For read calls, the data buffer to write completions into.
.br
For write calls, a completion to insert into the completion queue.
.br
For fi_cq_strerror, an optional buffer that receives printable error information.
.IP "count"
Number of CQ entries.
.IP "len"
Length of data buffer
.IP "src_addr"
Source address of a completed receive operation
.IP "flags"
Additional flags to apply to the operation
.IP "cond"
Condition that must be met before a completion is generated
.IP "timeout"
Time in milliseconds to wait.  A negative value indicates infinite timeout.
.IP "prov_errno"
Provider specific error value
.IP "err_data"
Provider specific error data related to a completion
.SH "DESCRIPTION"
Completion queues are used to report events associated with data transfers.
They are associated with message sends and receives, RMA, atomic, tagged
messages, and triggered events.  Reported events are
usually associated with a fabric endpoint, but may also refer to memory
regions used as the target of an RMA or atomic operation.
.SS "fi_cq_open"
fi_cq_open allocates a new completion queue.  Unlike event queues, completion
queues are associated with a resource domain and may be offloaded entirely
in provider hardware.
.PP 
The properties and behavior of a completion queue are defined by
struct fi_cq_attr.
.nf

struct fi_cq_attr {
	size_t               size;      /* # entries for CQ */
	uint64_t             flags;     /* operation flags */
	enum fi_cq_format    format;    /* completion format */
	enum fi_wait_obj     wait_obj;  /* requested wait object */
	int                  signaling_vector; /* interrupt affinity */
	enum fi_cq_wait_cond wait_cond; /* wait condition format */
	struct fid_wait     *wait_set;  /* optional wait set */
};
.fi
.IP "size"
Specifies the minimum size of an event queue. A value of 0 indicates that
the provider may choose a default value.
.IP "flags"
Flags that control the configuration of the CQ.
.RS
.IP "FI_WRITE"
Indicates that the application requires support for inserting user events
into the CQ.  If this flag is set, then the fi_cq_write and fi_cq_writeerr
operations must be
supported by the provider.  If the FI_WRITE flag is not set, then the
application may not invoke fi_cq_write of fi_cq_writeerr. 
.IP "FI_REMOTE_SIGNAL"
If specified, this indicates that the CQ should only signal its wait object
upon receiving a remote operation with FI_REMOTE_SIGNAL set, provided that all
other wait conditions have been met.  The use of FI_REMOTE_SIGNAL may
improve system utilization by deferring processing of an CQ until a remote
endpoint has completed all necessary operations.  FI_REMOTE_SIGNAL should be
treated as an optimization.  Providers are not required to wait until a
remote operation with FI_REMOTE_SIGNAL is received before signaling a wait
object associated with an CQ.
.RE
.IP "format"
Completion queues allow the application to select the amount of detail that it
must store and report.  The format attribute allows the application to
select one of several completion formats, indicating the structure of the data
that the completion queue should return when read.  Supported formats and the
structures that correspond to each are listed below.
.RS
.IP "FI_CQ_FORMAT_UNSPEC"
If an unspecified format is requested, then the CQ will use a provider
selected default format.
.IP "FI_CQ_FORMAT_CONTEXT"
Provides only user specified context that was associated with the completion.
.nf

struct fi_cq_entry {
	void     *op_context; /* operation context */
};
.fi
.IP "FI_CQ_FORMAT_MSG"
Provides minimal data for processing completions, with expanded support
for reporting information about received messages.
.nf

struct fi_cq_msg_entry {
	void     *op_context; /* operation context */
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
};
.fi
.IP "FI_CQ_FORMAT_DATA"
Provides data associated with a completion.  Includes support for received
message length, remote EQ data, and multi-receive buffers.
.nf

struct fi_cq_data_entry {
	void     *op_context; /* operation context */
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
	void     *buf;        /* receive data buffer */
	uint64_t data;        /* completion data */
};
.fi
.IP "FI_CQ_FORMAT_TAGGED"
Expands completion data to include support for the tagged message interfaces.
.nf

struct fi_cq_tagged_entry {
	void     *op_context; /* operation context */
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
	void     *buf;        /* receive data buffer */
	uint64_t data;        /* completion data */
	uint64_t tag;         /* received tag */
};
.fi
.IP "wait_obj"
CQ's may be associated with a specific wait object.  Wait objects allow
applications to block until the wait object is signaled, indicating that
a completion is available to be read.  Users may use fi_control to retrieve
the underlying wait object associated with an CQ, in order to use it in
other system calls.  The following values may be used to specify the type
of wait object associated with an CQ: FI_WAIT_NONE, FI_WAIT_UNSPEC,
FI_WAIT_SET, FI_WAIT_FD, and FI_WAIT_MUT_COND.
.RS
.IP "FI_WAIT_NONE"
Used to indicate that the user will not block (wait) for completions on the CQ.
When FI_WAIT_NONE is specified, the application may not call fi_cq_sread
or fi_cq_sreadfrom.
.IP "FI_WAIT_UNSPEC"
Specifies that the user will only wait on the CQ using fabric interface
calls, such as fi_cq_readcond or fi_cq_sreadfrom.  In this case, the
underlying provider may select the most appropriate or highest
performing wait object available, including custom wait mechanisms.
Applications that select
FI_WAIT_UNSPEC are not guaranteed to retrieve the underlying wait
object.
.IP "FI_WAIT_SET"
Indicates that the completion queue should use a wait set object to wait
for completions.  If specified, the wait_set field must reference an existing
wait set object.
.IP "FI_WAIT_FD"
Indicates that the CQ should use a file descriptor as its wait mechanism.
A file descriptor wait object must be usable in select, poll, and epoll
routines.  However, a provider may signal an FD wait object by marking it
as readable, writable, or with an error.
.IP "FI_WAIT_MUT_COND"
Specifies that the CQ should use a pthread mutex and cond variable as a
wait object.
.RE
.IP "signaling_vector"
Indicates which processor core interrupts associated with the EQ should
target.
.IP "wait_cond"
By default, when a completion is inserted into an CQ that supports blocking
reads (fi_cq_sread/fi_cq_sreadfrom), the corresponding wait
object is signaled.  Users may specify a condition that must
first be met before the wait is satisfied.  This field indicates how the
provider should interpret the cond field, which describes the condition
needed to signal the wait object.
.sp
A wait condition should be treated as an optimization.  Providers are
not required to meet the requirements of the condition before signaling
the wait object.  Applications should not rely on the condition
necessarily being true when a blocking read call returns.
.sp
If wait_cond is set to FI_CQ_COND_NONE, then no additional conditions
are applied to the signaling of the CQ wait object, and the insertion of
any new entry will trigger the wait condition.  If wait_cond is
set to FI_CQ_COND_THRESHOLD, then the cond field is interpreted as a size_t
threshold value.  The threshold indicates the number of entries that are
to be queued before at the CQ before the wait is satisfied.
.sp
This field is ignored if wait_obj is set to FI_WAIT_NONE.
.IP "wait_set"
If wait_obj is FI_WAIT_SET, this field references a wait object to which the
completion queue should attach.  When an event is inserted into the completion queue,
the corresponding wait set will be signaled if all necessary conditions are
met.  The use of a wait_set enables an optimized method of waiting for events
across multiple event and completion queues.  This field is ignored if wait_obj
is not FI_WAIT_SET. 
.SS "fi_close"
The fi_close call releases all resources associated with a completion
queue.  The CQ must not be bound to any other resources prior to
being closed.  Any completions which remain on the CQ when it is closed are
lost.
.SS "fi_control"
The fi_control call is used to access provider or implementation specific
details of the completion queue.  Access to the CQ should be serialized
across all calls when fi_control is invoked, as it may redirect the
implementation of CQ operations.  The following control commands are usable
with an CQ.
.IP "FI_GETWAIT (void **)"
This command allows the user to retrieve the low-level wait object
associated with the CQ.  The format of the wait-object is specified during
CQ creation, through the CQ attributes.  The fi_control arg parameter
should be an address where a pointer to the returned wait object
will be written.
.SS "fi_cq_read / fi_cq_readfrom"
The fi_cq_read and fi_cq_readfrom operations perform a non-blocking read of
completion data from the CQ.  The format of the completion event
is determined using the fi_cq_format option that was specified when
the CQ was opened.  Multiple completions may be retrieved
from a CQ in a single call.  The maximum number of
entries to return is limited to the
specified count parameter, with the number of entries successfully read from
the CQ returned by the call.
.PP
The fi_cq_readfrom call allows the CQ to return source address information to
the user for any received data.  Source address data is only available for
those endpoints configured with FI_SOURCE capability.  If fi_cq_readfrom is
called on an endpoint for which source addressing data is not available, the
source address will be set to FI_ADDR_NOTAVAIL.  The number of input src_addr
entries must the the same as the count parameter.
.PP
CQs are optimized to report operations which have completed successfully.
Operations which fail are reported 'out of band'.  Such operations are
retrieved using the fi_cq_readerr function.  When an operation
that completes with an unexpected error is inserted
into an CQ, it is placed into a temporary error queue.  Attempting to read
from an CQ while an item is in the error queue results in an FI_EAVAIL
failure.  Applications may use this return code to determine when to
call fi_cq_readerr.
.SS "fi_cq_sread / fi_cq_sreadfrom"
The fi_cq_sread and fi_cq_sreadfrom calls are the blocking equivalent
operations to fi_cq_read and fi_cq_readfrom.  Their behavior is similar to
the non-blocking calls, with the exception that the calls will not return
until either a completion has been read from the CQ or an error or timeout occurs.
.SS "fi_cq_readerr"
The read error function, fi_cq_readerr, retrieves information regarding
any asynchronous operation which has completed with an unexpected error.
fi_cq_readerr is a non-blocking call, returning immediately whether an
error completion was found or not.
.PP
Error information is reported to the user through struct fi_cq_err_entry.
The format of this structure is defined below.
.nf

struct fi_cq_err_entry {
	void     *op_context; /* operation context */
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
	void     *buf;        /* receive data buffer */
	uint64_t data;        /* completion data */
	uint64_t tag;         /* message tag */
	size_t   olen;        /* overflow length */
	int      err;         /* positive error code */
	int      prov_errno;  /* provider error code */
	void    *err_data;    /*  error data */
};

.fi
The general reason for the error is provided through the err field.  Provider
specific error information may also be available through the prov_errno
and err_data fields.  Users may call fi_cq_strerror to convert provider
specific error information into a printable string for debugging purposes.
.SS "fi_cq_write / fi_cq_writeerr"
The fi_cq_write and fi_cq_writeerr operations insert user-generated completion
entries into a completion queue.  fi_cq_write inserts non-error events into
the CQ.  The format of the fi_cq_write event must be the same as the
fi_cq_format attribute defined for the CQ when it was created.  fi_cq_writeerr
inserts error events into the CQ.  The error event format is struct
fi_cq_err_entry.  The number of entries to insert into the CQ is determined
by the len parameter.  Len must be a multiple of the size of the event to
insert.
.PP
User events inserted into a CQ with be associated with the source address
FI_ADDR_NOTAVAIL.
.SH "RETURN VALUES"
fi_cq_open 
.RS
Returns 0 on success.  On error, a negative value corresponding to
fabric errno is returned.
.RE
.PP
fi_cq_read / fi_cq_readfrom / fi_cq_readerr
.br
fi_cq_sread / fi_cq_sreadfrom
.RS
On success, returns the number of completion events retrieved from the
completion queue.  On error, a negative value corresponding to fabric
errno is returned. On timeout, -FI_ETIMEDOUT is returned.
.RE
fi_cq_write / fi_cq_writeerr
.RS
On success, returns the number of bytes read from or written to the completion
queue.  On error, a negative value corresponding to fabric errno
is returned.
.RE
.PP
fi_cq_strerror
.RS
Returns a character string interpretation of the provider specific error
returned with a completion.
.RE
.PP
Fabric errno values are defined in
.IR "rdma/fi_errno.h".
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3), fi_eq(3), fi_cntr(3), fi_poll(3)
