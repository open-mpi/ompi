.TH "FI_CNTR" 3 "2014-11-11" "Libfabric v0.0.2" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_cntr \- Completion and event counter operations
.PP
fi_cntr_open / fi_close
.RS
Allocate/free a counter
.RE
.PP
fi_cntr_read
.RS
Read the current value of a counter
.RE
.PP
fi_cntr_readerr
.RS
Reads the number of operations which have completed in error.
.RE
.PP
fi_cntr_add
.RS
Increment a counter by a specified value
.RE
.PP
fi_cntr_set
.RS
Set a counter to a specified value
.RE
.PP
fi_cntr_wait
.RS
Wait for a counter to be greater or equal to a threshold value
.RE
.SH SYNOPSIS
.B #include <rdma/fi_domain.h>
.HP
.BI "int fi_cntr_open(struct fid_domain *" domain ", struct fi_cntr_attr *" attr ", "
.BI "struct fid_cntr **" cntr ", void * " context ");"
.HP
.BI "int fi_close(struct fid *" cntr ");"
.PP
.HP
.BI "uint64_t fi_cntr_read(struct fid_cntr *" cntr ");"
.HP
.BI "uint64_t fi_cntr_readerr(struct fid_cntr *" cntr ");"
.HP
.BI "int fi_cntr_add(struct fid_cntr *" cntr ", uint64_t " value ");"
.HP
.BI "int fi_cntr_set(struct fid_cntr *" cntr ", uint64_t " value ");"
.PP
.HP
.BI "int fi_cntr_wait(struct fid_cntr *" cntr ", uint64_t " threshold ", "
.BI "int " timeout ");"
.SH ARGUMENTS
.IP "domain"
Fabric domain
.IP "cntr"
Fabric counter 
.IP "attr"
Counter attributes
.IP "context"
User specified context associated with the counter
.IP "value"
Value to increment or set counter
.IP "threshold"
Value to compare counter against
.IP "timeout"
Time in milliseconds to wait.  A negative value indicates infinite timeout.
.SH "DESCRIPTION"
Counters record the number of requested operations that have completed.
Counters can provide a light-weight completion mechanism by suppressing
the generation of a full completion event.  They are useful for applications
that only need to know the number of requests that have completed, and not
details about each request.  For example, counters may be useful for
implementing credit based flow control or tracking the number of remote
processes which have responded to a request.
.PP
Counters typically only count successful completions.  However, if an
operation completes in error, it may increment an associated error value.
.SS "fi_cntr_open"
fi_cntr_open allocates a new fabric counter.  The properties and behavior of
the counter are defined by struct fi_cntr_attr.
.sp
.nf
struct fi_cntr_attr {
	enum fi_cntr_events  events;    /* type of events to count */
	enum fi_wait_obj     wait_obj;  /* requested wait object */
	struct fid_wait     *wait_set;  /* optional wait set */
	uint64_t             flags;     /* operation flags */
};
.fi
.IP "events"
A counter captures different types of events.  The specific type which is to
counted are one of the following:
.RS
.IP "FI_CNTR_EVENTS_COMP"
The counter increments for every successful completion that occurs on an
associated bound endpoint.  The type of completions -- sends and/or receives --
which are counted may be restricted using control flags when binding
the counter an the endpoint.  Counters increment on all successful completions,
separately from whether the operation generates an entry in an event queue.
.RE
.IP "wait_obj"
Counters may be associated with a specific wait object.  Wait objects allow
applications to block until the wait object is signaled, indicating that
a counter has reached a specific threshold.  Users may use fi_control to
retrieve the underlying wait object associated with a counter, in order to
use it in other system calls.  The following values may be used to specify
the type of wait object associated with a counter: FI_WAIT_NONE,
FI_WAIT_UNSPEC, FI_WAIT_SET, FI_WAIT_FD, and FI_WAIT_MUT_COND.
.RS
.IP "FI_WAIT_NONE"
Used to indicate that the user will not block (wait) for events on the counter.
.IP "FI_WAIT_UNSPEC"
Specifies that the user will only wait on the counter using fabric interface
calls, such as fi_cntr_readcond.  In this case, the underlying provider may
select the most appropriate or highest performing wait object available,
including custom wait mechanisms.  Applications that select
FI_WAIT_UNSPEC are not guaranteed to retrieve the underlying wait
object.
.IP "FI_WAIT_SET"
Indicates that the event counter should use a wait set object to wait
for events.  If specified, the wait_set field must reference an existing
wait set object.
.IP "FI_WAIT_FD"
Indicates that the counter should use a file descriptor as its wait mechanism.
A file descriptor wait object must be usable in select, poll, and epoll
routines.  However, a provider may signal an FD wait object by marking it
as readable, writable, or with an error.
.IP "FI_WAIT_MUT_COND"
Specifies that the counter should use a pthread mutex and cond variable as a
wait object.
.RE
.IP "wait_set"
If wait_obj is FI_WAIT_SET, this field references a wait object to which the
event counter should attach.  When an event is added to the event counter,
the corresponding wait set will be signaled if all necessary conditions are
met.  The use of a wait_set enables an optimized method of waiting for events
across multiple event counters.  This field is ignored if wait_obj is not
FI_WAIT_SET.
.IP "flags"
Flags are reserved for future use, and must be set to 0.
.SS "fi_close"
The fi_close call releases all resources associated with a counter.
The counter must not be bound to any other resources prior to being freed.
.SS "fi_cntr_control"
The fi_cntr_control call is used to access provider or implementation specific
details of the counter.  Access to the counter should be serialized
across all calls when fi_cntr_control is invoked, as it may redirect the
implementation of counter operations.  The following control commands are usable
with a counter:
.IP "FI_GETOPSFLAG (uint64_t *)"
Returns the current default operational flags associated with the counter.
.IP "FI_SETOPSFLAG (uint64_t *)"
Modifies the current default operational flags associated with the counter.
.IP "FI_GETWAIT (void **)"
This command allows the user to retrieve the low-level wait object
associated with the counter.  The format of the wait-object is specified during
counter creation, through the counter attributes.  The fi_cntr_control arg
parameter should be an address where a pointer to the returned wait object
will be written.
.RS
.IP "FI_CNTR_WAIT_MUT_COND"
The counter wait is implemented using a pthread_mutex_t and pthread_cond_t.
FI_GETWAIT will return two pointers, a reference to pthread_mutex_t * and
pthread_cond_t *, respectively.
.RE
.SS "fi_cntr_read"
The fi_cntr_read call returns the current value of the counter.
.SS "fi_cntr_readerr"
The read error call returns the number of operations that completed in error
and were unable to update the counter.
.SS "fi_cntr_add"
This adds the user-specified value to the counter.
.SS "fi_cntr_set"
This sets the counter to the specified value.
.SS "fi_cntr_wait"
This call may be used to wait until the counter reaches the specified
threshold, or until an error or timeout occurs.
Upon successful return from this call,
the counter will be greater than or equal to the input threshold value.
.sp
If an operation associated with the counter encounters an error, it will
increment the error value associated with the counter.  Any change in a
counter's error value will unblock any thread inside fi_cntr_wait. 
.sp
If the call returns due to timeout, -FI_ETIMEDOUT will be returned.
The error value associated with the counter remains unchanged.
.SH "RETURN VALUES"
Returns 0 on success.  On error, a negative value corresponding to
fabric errno is returned.
.PP
fi_cntr_read /  fi_cntr_readerr
.RS
Returns the current value of the counter.
.RE
.PP
Fabric errno values are defined in
.IR "rdma/fi_errno.h".
.SH "NOTES"
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3), fi_eq(3), fi_poll(3)
