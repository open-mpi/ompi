.TH "pmix_init" "3" "2015\-09\-09" "PMIx Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
PMIx_Init \- Initialize the PMIx Client
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <pmix.h>

pmix_status_t\ PMIx_Init(pmix_proc_t\ *proc);
\f[]
.fi
.SH ARGUMENTS
.PP
\f[I]proc\f[] : Fabric endpoint on which to initiate atomic operation.
.SH DESCRIPTION
.PP
Initialize the PMIx client, returning the process identifier assigned to
this client\[aq]s application in the provided pmix_proc_t struct.
Passing a parameter of \f[I]NULL\f[] for this parameter is allowed if
the user wishes solely to initialize the PMIx system and does not
require return of the identifier at that time.
.PP
When called, the PMIx client will check for the required connection
information of the local PMIx server and will establish the connection.
If the information is not found, or the server connection fails, then an
appropriate error constant will be returned.
.PP
If successful, the function will return PMIX_SUCCESS and will fill the
provided structure with the server\-assigned namespace and rank of the
process within the application.
.PP
Note that the PMIx client library is referenced counted, and so multiple
calls to PMIx_Init are allowed.
Thus, one way to obtain the namespace and rank of the process is to
simply call PMIx_Init with a non\-NULL parameter.
.SS Atomic Data Types
.PP
Atomic functions may operate on one of the following identified data
types.
A given atomic function may support any datatype, subject to provider
implementation constraints.
.PP
\f[I]FI_INT8\f[] : Signed 8\-bit integer.
.PP
\f[I]FI_UINT8\f[] : Unsigned 8\-bit integer.
.PP
\f[I]FI_INT16\f[] : Signed 16\-bit integer.
.PP
\f[I]FI_UINT16\f[] : Unsigned 16\-bit integer.
.PP
\f[I]FI_INT32\f[] : Signed 32\-bit integer.
.PP
\f[I]FI_UINT32\f[] : Unsigned 32\-bit integer.
.PP
\f[I]FI_INT64\f[] : Signed 64\-bit integer.
.PP
\f[I]FI_UINT64\f[] : Unsigned 64\-bit integer.
.PP
\f[I]FI_FLOAT\f[] : A single\-precision floating point value (IEEE 754).
.PP
\f[I]FI_DOUBLE\f[] : A double\-precision floating point value (IEEE
754).
.PP
\f[I]FI_FLOAT_COMPLEX\f[] : An ordered pair of single\-precision
floating point values (IEEE 754), with the first value representing the
real portion of a complex number and the second representing the
imaginary portion.
.PP
\f[I]FI_DOUBLE_COMPLEX\f[] : An ordered pair of double\-precision
floating point values (IEEE 754), with the first value representing the
real portion of a complex number and the second representing the
imaginary portion.
.PP
\f[I]FI_LONG_DOUBLE\f[] : A double\-extended precision floating point
value (IEEE 754).
.PP
\f[I]FI_LONG_DOUBLE_COMPLEX\f[] : An ordered pair of double\-extended
precision floating point values (IEEE 754), with the first value
representing the real portion of a complex number and the second
representing the imaginary portion.
.SH RETURN VALUE
.PP
Returns PMIX_SUCCESS on success.
On error, a negative value corresponding to a PMIx errno is returned.
PMIx errno values are defined in \f[C]pmix_common.h\f[].
.SH ERRORS
.PP
\f[I]\-FI_EOPNOTSUPP\f[] : The requested atomic operation is not
supported on this endpoint.
.PP
\f[I]\-FI_EMSGSIZE\f[] : The number of atomic operations in a single
request exceeds that supported by the underlying provider.
.SH NOTES
.SH SEE ALSO
.PP
\f[C]fi_getinfo\f[](3), \f[C]fi_endpoint\f[](3), \f[C]fi_domain\f[](3),
\f[C]fi_cq\f[](3), \f[C]fi_rma\f[](3)
.SH AUTHORS
PMIx.
