#
# Copyright (c) 2006-2013 Cisco Systems, Inc.  All rights reserved.
# Copyright (c) 2006-2011 Mellanox Technologies. All rights reserved.
# Copyright (c) 2018      Los Alamos National Security, LLC. All rights
#                         reserved.
# $COPYRIGHT$
#
# Additional copyrights may follow
#

# This is the default RNIC parameters file for Open MPI's Iwarp
# BTL.  If RNIC vendors wish to add their respective values into
# this file (that is distributed with Open MPI), please contact the
# Open MPI development team.  See http://www.open-mpi.org/ for
# details.

# This file is in the "ini" style, meaning that it has sections
# identified section names enclosed in square brackets (e.g.,
# "[Section name]") followed by "key = value" pairs indicating values
# for a specific RNIC vendor and model.  RNICs are identified
# by their vendor ID and vendor part ID, which can be obtained by
# running the diagnostic utility command "ibv_devinfo".  The fields
# "vendor_id" and "vendor_part"id" are the vendor ID and vendor part
# ID, respectively.

# The sections in this file only accept a few fields:

# vendor_id: a comma-delimited list of integers of RNIC vendor IDs,
# expressed either in decimal or hexidecimal (e.g., "13" or "0xd").
# Individual values can be taken directly from the output of
# "ibv_devinfo".  RNIC vendor ID's correspond to IEEE OUI's, for
# which you can find the canonical list here:
# http://standards.ieee.org/regauth/oui/.  Example:
#
#     vendor_id = 0x05ad
#
# vendor_part_id: a comma-delimited list of integers of different
# RNIC models from a single vendor, expressed in either decimal or
# hexidecimal (e.g., "13" or "0xd").  Individual values can be
# obtained from the output of the "ibv_devinfo".  Example:
#
#     vendor_part_id = 25208,25218

# mtu: an integer indicating the maximum transfer unit (MTU) to be
# used with this RNIC.  The effective MTU will be the minimum of an
# RNIC's MTU value and its peer RNIC's MTU value.  Valid
# values are 256, 512, 1024, 2048, and 4096.  Example:
#
#    mtu = 1024

# use_eager_rdma: an integer indicating whether RDMA should be used
# for eager messages.  0 values indicate "no" (false); non-zero values
# indicate "yes" (true).  This flag should only be enabled for
# RNICs that can provide guarantees about ordering of data in
# memory -- that the last byte of an incoming RDMA write will always
# be written last.  Certain cards cannot provide this guarantee, while
# others can.

#    use_eager_rdma = 1

# receive_queues: a list of "bucket shared receive queues" (BSRQ) that
# are opened between MPI process peer pairs for point-to-point
# communications of messages shorter than the total length required
# for RDMA transfer.  The use of multiple RQs, each with different
# sized posted receive buffers can allow [much] better registered
# memory utilization -- MPI messages are sent on the QP with the
# smallest buffer size that will fit the message.  Note that flow
# control messages are always sent across the QP with the smallest
# buffer size.  Also note that the buffers *must* be listed in
# increasing buffer size.  This parameter matches the
# mca_btl_openib_receive_queues MCA parameter; see the ompi_info help
# message and FAQ for a description of its values.  BSRQ
# specifications are found in this precedence:

# highest: specifying the mca_btl_openib_receive_queues MCA param
# next:    finding a value in this file
# lowest:  using the default mca_btl_openib_receive_queues MCA param value

#    receive_queues = P,128,256,192,128:S,65536,256,192,128

# max_inline_data: an integer specifying the maximum inline data (in
# bytes) supported by the device.  -1 means to use a run-time probe to
# figure out the maximum value supported by the device.

#    max_inline_data = 1024

# rdmacm_reject_causes_connect_error: a boolean indicating whether
# when an RDMA CM REJECT is issued on the device, instead of getting
# the expected REJECT event back, you might get a CONNECT_ERROR event.
# Open MPI uses RDMA CM REJECT messages in its normal wireup
# procedure; some connections are *expected* to be rejected.  However,
# with some older drivers, if process A issues a REJECT, process B
# will receive a CONNECT_ERROR event instead of a REJECT event.  So if
# this flag is set to true and we receive a CONNECT_ERROR event on a
# connection where we are expecting a REJECT, then just treat the
# CONNECT_ERROR exactly as we would have treated the REJECT.  Setting
# this flag to true allows Open MPI to work around the behavior
# described above.  It is [mostly] safe to set this flag to true even
# after a driver has been fixed; the scope of where this flag is used
# is small enough that it *shouldn't* mask real CONNECT_ERROR events.

#    rdmacm_reject_causes_connect_error = 1

############################################################################

[default]
# These are the default values, identified by the vendor and part ID
# numbers of 0 and 0.  If queried RNIC does not return vendor and
# part ID numbers that match any of the sections in this file, the
# values in this section are used.  Vendor IDs and part IDs can be hex
# or decimal.
vendor_id = 0
vendor_part_id = 0
use_eager_rdma = 0
mtu = 1024
max_inline_data = 128

############################################################################

# Chelsio's OUI is 0x0743.  0x1425 is the PCI ID.

[Chelsio T3]
vendor_id = 0x1425
vendor_part_id = 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0030,0x0031,0x0032,0x0035,0x0036
use_eager_rdma = 1
mtu = 2048
receive_queues = P,65536,256,192,128
max_inline_data = 64

[Chelsio T4]
vendor_id = 0x1425
vendor_part_id = 0xa000,0x4400,0x4401,0x4402,0x4403,0x4404,0x4405,0x4406,0x4407,0x4408,0x4409,0x440a,0x440b,0x440c,0x440d,0x440e,0x4480,0x4481
use_eager_rdma = 1
mtu = 2048
receive_queues = P,65536,64
max_inline_data = 280

[Chelsio T5]
vendor_id = 0x1425
vendor_part_id = 0xb000,0xb001,0x5400,0x5401,0x5402,0x5403,0x5404,0x5405,0x5406,0x5407,0x5408,0x5409,0x540a,0x540b,0x540c,0x540d,0x540e,0x540f,0x5410,0x5411,0x5412,0x5413
use_eager_rdma = 1
mtu = 2048
receive_queues = P,65536,64
max_inline_data = 280

[Chelsio T6]
vendor_id = 0x1425
vendor_part_id = 0x6400,0x6401,0x6402,0x6403,0x6404,0x6405,0x6406,0x6407,0x6408,0x6409,0x640d,0x6410,0x6411,0x6414,0x6415
use_eager_rdma = 1
mtu = 2048
receive_queues = P,65536,64
max_inline_data = 280

############################################################################

# IBM Soft iWARP device.

[IBM Soft iWARP]
vendor_id =  0x626d74
vendor_part_id = 0
use_eager_rdma = 1
mtu = 2048
receive_queues = P,65536,64
max_inline_data = 72
