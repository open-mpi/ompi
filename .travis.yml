# Use "required" for sudo, because we want to use the "trusty" Debian
# distro, which is (currently) only available in the legacy Travis
# infrastructure (i.e., if we put "sudo: false" to use the new container-
# based Travis infrastructure, then "trusty" is not available).  We
# need the "trusty" distro because it has more recent versions of the
# GNU Autotools (i.e., autogen.pl will fail if you use the regular
# distro because the GNU Autotools are too old).
sudo: required
dist: trusty
language: c

# Iterate over 2 different compilers
compiler:
    - gcc

# Iterate over 2 different OSs
os:
    - osx

osx_image:
    - xcode8
    - xcode7.3
    - xcode7.2
    - xcode7.1
    - xcode7
    - xcode6.4
    - beta-xcode6.2

env:
    global:
        - AM_MAKEFLAGS="-j4"
        - CPPFLAGS="-I$HOME/bogus/include"
        - LDFLAGS="-L$HOME/bogus/lib"
        - LD_LIBRARY_PATH="$HOME/bogus/lib"

# Note that we use "make -k" to do the entire build, even if there was a
# build error in there somewhere.  This prevents us from needing to submit
# to Travis, see the first error, fix that first error, submit again, ...etc.
install:
    - uname -a
    - sw_vers -productVersion || true
    - sudo apt-get update || true
    - echo $TRAVIS_PYTHON_VERSION
    - python -V
    - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda config --add channels conda-forge
    - conda update -q conda
    - conda install gcc perl conda-build
    - git clone -b fortran-osx https://github.com/ggouaillardet/openmpi-feedstock.git
    - cd openmpi-feedstock
    - conda build .


# We only need to distcheck on one OS / compiler combination (this is just
# a minor optimization to make the overall set of builds faster).
script:
    - echo YEAH !

